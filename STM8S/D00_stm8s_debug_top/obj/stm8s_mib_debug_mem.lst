                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ISO C Compiler 
                                      3 ; Version 4.2.10 #13778 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_mib_debug_mem
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _HexDump
                                     12 	.globl _HexToInt
                                     13 	.globl _mib_printf
                                     14 	.globl _MibWriteDebugString
                                     15 	.globl ___memcpy
                                     16 	.globl _memset
                                     17 	.globl _strcmp
                                     18 	.globl _memcmp
                                     19 	.globl _cmd_mem
                                     20 ;--------------------------------------------------------
                                     21 ; ram data
                                     22 ;--------------------------------------------------------
                                     23 	.area DATA
                                     24 ;--------------------------------------------------------
                                     25 ; ram data
                                     26 ;--------------------------------------------------------
                                     27 	.area INITIALIZED
      000000                         28 _cmdTbl_only:
      000000                         29 	.ds 12
                                     30 ;--------------------------------------------------------
                                     31 ; absolute external ram data
                                     32 ;--------------------------------------------------------
                                     33 	.area DABS (ABS)
                                     34 
                                     35 ; default segment ordering for linker
                                     36 	.area HOME
                                     37 	.area GSINIT
                                     38 	.area GSFINAL
                                     39 	.area CONST
                                     40 	.area INITIALIZER
                                     41 	.area CODE
                                     42 
                                     43 ;--------------------------------------------------------
                                     44 ; global & static initialisations
                                     45 ;--------------------------------------------------------
                                     46 	.area HOME
                                     47 	.area GSINIT
                                     48 	.area GSFINAL
                                     49 	.area GSINIT
                                     50 ;--------------------------------------------------------
                                     51 ; Home
                                     52 ;--------------------------------------------------------
                                     53 	.area HOME
                                     54 	.area HOME
                                     55 ;--------------------------------------------------------
                                     56 ; code
                                     57 ;--------------------------------------------------------
                                     58 	.area CODE
                                     59 ;	./../../mib/stm8s_mib_debug_mem.c: 53: void cmd_mem(void)
                                     60 ;	-----------------------------------------
                                     61 ;	 function cmd_mem
                                     62 ;	-----------------------------------------
      000000                         63 _cmd_mem:
      000000 52 0A            [ 2]   64 	sub	sp, #10
                                     65 ;	./../../mib/stm8s_mib_debug_mem.c: 59: for (cptr = cmdTbl;; cptr++) 
      000002 AEr00r00         [ 2]   66 	ldw	x, #(_cmdTbl+0)
      000005 1F 01            [ 2]   67 	ldw	(0x01, sp), x
      000007 5F               [ 1]   68 	clrw	x
      000008 1F 07            [ 2]   69 	ldw	(0x07, sp), x
      00000A 1F 05            [ 2]   70 	ldw	(0x05, sp), x
      00000C 16 01            [ 2]   71 	ldw	y, (0x01, sp)
      00000E 17 09            [ 2]   72 	ldw	(0x09, sp), y
      000010                         73 00106$:
                                     74 ;	./../../mib/stm8s_mib_debug_mem.c: 61: if(cptr->cmd==0)
      000010 1E 09            [ 2]   75 	ldw	x, (0x09, sp)
      000012 FE               [ 2]   76 	ldw	x, (x)
      000013 1F 03            [ 2]   77 	ldw	(0x03, sp), x
      000015 26 19            [ 1]   78 	jrne	00102$
                                     79 ;	./../../mib/stm8s_mib_debug_mem.c: 63: ccprintf(1,("INFO:+cmd_mem...\r\n"));
      000017 4Br00            [ 1]   80 	push	#<(__str_0+0)
      000019 4Bs00            [ 1]   81 	push	#((__str_0+0) >> 8)
      00001B CDr00r00         [ 4]   82 	call	_mib_printf
      00001E 5B 02            [ 2]   83 	addw	sp, #2
                                     84 ;	./../../mib/stm8s_mib_debug_mem.c: 64: memcpy((void *)&(cptr->cmd),(void *)&(cmdTbl_only[0].cmd),sizeof(CMD_MY));
      000020 AEr00r00         [ 2]   85 	ldw	x, #_cmdTbl_only+0
      000023 16 01            [ 2]   86 	ldw	y, (0x01, sp)
      000025 4B 06            [ 1]   87 	push	#0x06
      000027 4B 00            [ 1]   88 	push	#0x00
      000029 89               [ 2]   89 	pushw	x
      00002A 93               [ 1]   90 	ldw	x, y
      00002B CDr00r00         [ 4]   91 	call	___memcpy
                                     92 ;	./../../mib/stm8s_mib_debug_mem.c: 65: break;
      00002E 20 2F            [ 2]   93 	jra	00105$
      000030                         94 00102$:
                                     95 ;	./../../mib/stm8s_mib_debug_mem.c: 67: index++;
      000030 1E 07            [ 2]   96 	ldw	x, (0x07, sp)
      000032 5C               [ 1]   97 	incw	x
      000033 1F 07            [ 2]   98 	ldw	(0x07, sp), x
      000035 26 05            [ 1]   99 	jrne	00126$
      000037 1E 05            [ 2]  100 	ldw	x, (0x05, sp)
      000039 5C               [ 1]  101 	incw	x
      00003A 1F 05            [ 2]  102 	ldw	(0x05, sp), x
      00003C                        103 00126$:
                                    104 ;	./../../mib/stm8s_mib_debug_mem.c: 68: if(index>MAX_COMMANDS)
      00003C AE 00 06         [ 2]  105 	ldw	x, #0x0006
      00003F 13 07            [ 2]  106 	cpw	x, (0x07, sp)
      000041 4F               [ 1]  107 	clr	a
      000042 12 06            [ 1]  108 	sbc	a, (0x06, sp)
      000044 4F               [ 1]  109 	clr	a
      000045 12 05            [ 1]  110 	sbc	a, (0x05, sp)
      000047 24 0B            [ 1]  111 	jrnc	00107$
                                    112 ;	./../../mib/stm8s_mib_debug_mem.c: 70: ccprintf(1,("INFO:-cmd_mem...\r\n"));
      000049 4Br13            [ 1]  113 	push	#<(__str_1+0)
      00004B 4Bs00            [ 1]  114 	push	#((__str_1+0) >> 8)
      00004D CDr00r00         [ 4]  115 	call	_mib_printf
      000050 5B 02            [ 2]  116 	addw	sp, #2
                                    117 ;	./../../mib/stm8s_mib_debug_mem.c: 71: return;
      000052 20 0B            [ 2]  118 	jra	00108$
      000054                        119 00107$:
                                    120 ;	./../../mib/stm8s_mib_debug_mem.c: 59: for (cptr = cmdTbl;; cptr++) 
      000054 1E 09            [ 2]  121 	ldw	x, (0x09, sp)
      000056 1C 00 06         [ 2]  122 	addw	x, #0x0006
      000059 1F 09            [ 2]  123 	ldw	(0x09, sp), x
      00005B 1F 01            [ 2]  124 	ldw	(0x01, sp), x
      00005D 20 B1            [ 2]  125 	jra	00106$
      00005F                        126 00105$:
                                    127 ;	./../../mib/stm8s_mib_debug_mem.c: 74: return;
      00005F                        128 00108$:
                                    129 ;	./../../mib/stm8s_mib_debug_mem.c: 75: }
      00005F 5B 0A            [ 2]  130 	addw	sp, #10
      000061 81               [ 4]  131 	ret
                                    132 ;	./../../mib/stm8s_mib_debug_mem.c: 85: static int DoMem(CMD_MY *cptr, int argc, char **argv)
                                    133 ;	-----------------------------------------
                                    134 ;	 function DoMem
                                    135 ;	-----------------------------------------
      000062                        136 _DoMem:
      000062 52 29            [ 2]  137 	sub	sp, #41
      000064 1F 24            [ 2]  138 	ldw	(0x24, sp), x
                                    139 ;	./../../mib/stm8s_mib_debug_mem.c: 87: uint32_t addr = 0;
      000066 5F               [ 1]  140 	clrw	x
      000067 1F 03            [ 2]  141 	ldw	(0x03, sp), x
      000069 1F 01            [ 2]  142 	ldw	(0x01, sp), x
                                    143 ;	./../../mib/stm8s_mib_debug_mem.c: 99: if (argc < 3)
      00006B 1E 2C            [ 2]  144 	ldw	x, (0x2c, sp)
      00006D A3 00 03         [ 2]  145 	cpw	x, #0x0003
      000070 2E 0B            [ 1]  146 	jrsge	00102$
                                    147 ;	./../../mib/stm8s_mib_debug_mem.c: 101: MibWriteDebugString(cptr->usage);
      000072 1E 24            [ 2]  148 	ldw	x, (0x24, sp)
      000074 EE 04            [ 2]  149 	ldw	x, (0x4, x)
      000076 CDr00r00         [ 4]  150 	call	_MibWriteDebugString
                                    151 ;	./../../mib/stm8s_mib_debug_mem.c: 102: return FALSE;
      000079 5F               [ 1]  152 	clrw	x
      00007A CCr07rD7         [ 2]  153 	jp	00235$
      00007D                        154 00102$:
                                    155 ;	./../../mib/stm8s_mib_debug_mem.c: 104: if (!strcmp(argv[1], "write")) // _CMD_MY_WRITE_
      00007D 1E 2E            [ 2]  156 	ldw	x, (0x2e, sp)
      00007F 5C               [ 1]  157 	incw	x
      000080 5C               [ 1]  158 	incw	x
      000081 1F 26            [ 2]  159 	ldw	(0x26, sp), x
      000083 FE               [ 2]  160 	ldw	x, (x)
      000084 4Br26            [ 1]  161 	push	#<(___str_2+0)
      000086 4Bs00            [ 1]  162 	push	#((___str_2+0) >> 8)
      000088 CDr00r00         [ 4]  163 	call	_strcmp
      00008B 5D               [ 2]  164 	tnzw	x
      00008C 27 03            [ 1]  165 	jreq	00564$
      00008E CCr01r64         [ 2]  166 	jp	00215$
      000091                        167 00564$:
                                    168 ;	./../../mib/stm8s_mib_debug_mem.c: 106: if (argc < 5)
      000091 1E 2C            [ 2]  169 	ldw	x, (0x2c, sp)
      000093 A3 00 05         [ 2]  170 	cpw	x, #0x0005
      000096 2E 0B            [ 1]  171 	jrsge	00104$
                                    172 ;	./../../mib/stm8s_mib_debug_mem.c: 108: MibWriteDebugString(cptr->usage);
      000098 1E 24            [ 2]  173 	ldw	x, (0x24, sp)
      00009A EE 04            [ 2]  174 	ldw	x, (0x4, x)
      00009C CDr00r00         [ 4]  175 	call	_MibWriteDebugString
                                    176 ;	./../../mib/stm8s_mib_debug_mem.c: 109: return FALSE;
      00009F 5F               [ 1]  177 	clrw	x
      0000A0 CCr07rD7         [ 2]  178 	jp	00235$
      0000A3                        179 00104$:
                                    180 ;	./../../mib/stm8s_mib_debug_mem.c: 111: if (!HexToInt(argv[3], &addr, 32))
      0000A3 96               [ 1]  181 	ldw	x, sp
      0000A4 5C               [ 1]  182 	incw	x
      0000A5 51               [ 1]  183 	exgw	x, y
      0000A6 1E 2E            [ 2]  184 	ldw	x, (0x2e, sp)
      0000A8 EE 06            [ 2]  185 	ldw	x, (0x6, x)
      0000AA 4B 20            [ 1]  186 	push	#0x20
      0000AC 4B 00            [ 1]  187 	push	#0x00
      0000AE 90 89            [ 2]  188 	pushw	y
      0000B0 CDr00r00         [ 4]  189 	call	_HexToInt
      0000B3 5D               [ 2]  190 	tnzw	x
      0000B4 26 0D            [ 1]  191 	jrne	00106$
                                    192 ;	./../../mib/stm8s_mib_debug_mem.c: 113: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0000B6 4Br2C            [ 1]  193 	push	#<(__str_3+0)
      0000B8 4Bs00            [ 1]  194 	push	#((__str_3+0) >> 8)
      0000BA CDr00r00         [ 4]  195 	call	_mib_printf
      0000BD 5B 02            [ 2]  196 	addw	sp, #2
                                    197 ;	./../../mib/stm8s_mib_debug_mem.c: 114: return FALSE;
      0000BF 5F               [ 1]  198 	clrw	x
      0000C0 CCr07rD7         [ 2]  199 	jp	00235$
      0000C3                        200 00106$:
                                    201 ;	./../../mib/stm8s_mib_debug_mem.c: 117: switch (argv[2][0])
      0000C3 1E 2E            [ 2]  202 	ldw	x, (0x2e, sp)
      0000C5 EE 04            [ 2]  203 	ldw	x, (0x4, x)
      0000C7 F6               [ 1]  204 	ld	a, (x)
      0000C8 A1 63            [ 1]  205 	cp	a, #0x63
      0000CA 27 0B            [ 1]  206 	jreq	00107$
      0000CC A1 6C            [ 1]  207 	cp	a, #0x6c
      0000CE 27 5B            [ 1]  208 	jreq	00113$
      0000D0 A1 73            [ 1]  209 	cp	a, #0x73
      0000D2 27 2D            [ 1]  210 	jreq	00110$
      0000D4 CCr01r59         [ 2]  211 	jp	00116$
                                    212 ;	./../../mib/stm8s_mib_debug_mem.c: 119: case 'c':
      0000D7                        213 00107$:
                                    214 ;	./../../mib/stm8s_mib_debug_mem.c: 120: if (!HexToInt(argv[4], &c, 8))
      0000D7 96               [ 1]  215 	ldw	x, sp
      0000D8 1C 00 05         [ 2]  216 	addw	x, #5
      0000DB 51               [ 1]  217 	exgw	x, y
      0000DC 1E 2E            [ 2]  218 	ldw	x, (0x2e, sp)
      0000DE EE 08            [ 2]  219 	ldw	x, (0x8, x)
      0000E0 4B 08            [ 1]  220 	push	#0x08
      0000E2 4B 00            [ 1]  221 	push	#0x00
      0000E4 90 89            [ 2]  222 	pushw	y
      0000E6 CDr00r00         [ 4]  223 	call	_HexToInt
      0000E9 5D               [ 2]  224 	tnzw	x
      0000EA 26 0D            [ 1]  225 	jrne	00109$
                                    226 ;	./../../mib/stm8s_mib_debug_mem.c: 122: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0000EC 4Br2C            [ 1]  227 	push	#<(__str_3+0)
      0000EE 4Bs00            [ 1]  228 	push	#((__str_3+0) >> 8)
      0000F0 CDr00r00         [ 4]  229 	call	_mib_printf
      0000F3 5B 02            [ 2]  230 	addw	sp, #2
                                    231 ;	./../../mib/stm8s_mib_debug_mem.c: 123: return FALSE;
      0000F5 5F               [ 1]  232 	clrw	x
      0000F6 CCr07rD7         [ 2]  233 	jp	00235$
      0000F9                        234 00109$:
                                    235 ;	./../../mib/stm8s_mib_debug_mem.c: 125: wr_ADDR8(addr, c);
      0000F9 1E 03            [ 2]  236 	ldw	x, (0x03, sp)
      0000FB 7B 05            [ 1]  237 	ld	a, (0x05, sp)
      0000FD F7               [ 1]  238 	ld	(x), a
                                    239 ;	./../../mib/stm8s_mib_debug_mem.c: 126: break;
      0000FE CCr07rD5         [ 2]  240 	jp	00216$
                                    241 ;	./../../mib/stm8s_mib_debug_mem.c: 127: case 's':
      000101                        242 00110$:
                                    243 ;	./../../mib/stm8s_mib_debug_mem.c: 128: if (!HexToInt(argv[4], &s, 16))
      000101 96               [ 1]  244 	ldw	x, sp
      000102 1C 00 06         [ 2]  245 	addw	x, #6
      000105 51               [ 1]  246 	exgw	x, y
      000106 1E 2E            [ 2]  247 	ldw	x, (0x2e, sp)
      000108 EE 08            [ 2]  248 	ldw	x, (0x8, x)
      00010A 4B 10            [ 1]  249 	push	#0x10
      00010C 4B 00            [ 1]  250 	push	#0x00
      00010E 90 89            [ 2]  251 	pushw	y
      000110 CDr00r00         [ 4]  252 	call	_HexToInt
      000113 5D               [ 2]  253 	tnzw	x
      000114 26 0D            [ 1]  254 	jrne	00112$
                                    255 ;	./../../mib/stm8s_mib_debug_mem.c: 130: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      000116 4Br2C            [ 1]  256 	push	#<(__str_3+0)
      000118 4Bs00            [ 1]  257 	push	#((__str_3+0) >> 8)
      00011A CDr00r00         [ 4]  258 	call	_mib_printf
      00011D 5B 02            [ 2]  259 	addw	sp, #2
                                    260 ;	./../../mib/stm8s_mib_debug_mem.c: 131: return FALSE;
      00011F 5F               [ 1]  261 	clrw	x
      000120 CCr07rD7         [ 2]  262 	jp	00235$
      000123                        263 00112$:
                                    264 ;	./../../mib/stm8s_mib_debug_mem.c: 133: wr_ADDR16(addr, s);
      000123 1E 03            [ 2]  265 	ldw	x, (0x03, sp)
      000125 16 06            [ 2]  266 	ldw	y, (0x06, sp)
      000127 FF               [ 2]  267 	ldw	(x), y
                                    268 ;	./../../mib/stm8s_mib_debug_mem.c: 134: break;
      000128 CCr07rD5         [ 2]  269 	jp	00216$
                                    270 ;	./../../mib/stm8s_mib_debug_mem.c: 135: case 'l':
      00012B                        271 00113$:
                                    272 ;	./../../mib/stm8s_mib_debug_mem.c: 136: if (!HexToInt(argv[4], &l, 32))
      00012B 96               [ 1]  273 	ldw	x, sp
      00012C 1C 00 08         [ 2]  274 	addw	x, #8
      00012F 51               [ 1]  275 	exgw	x, y
      000130 1E 2E            [ 2]  276 	ldw	x, (0x2e, sp)
      000132 EE 08            [ 2]  277 	ldw	x, (0x8, x)
      000134 4B 20            [ 1]  278 	push	#0x20
      000136 4B 00            [ 1]  279 	push	#0x00
      000138 90 89            [ 2]  280 	pushw	y
      00013A CDr00r00         [ 4]  281 	call	_HexToInt
      00013D 5D               [ 2]  282 	tnzw	x
      00013E 26 0D            [ 1]  283 	jrne	00115$
                                    284 ;	./../../mib/stm8s_mib_debug_mem.c: 138: ccprintf(_DEBUG_CMD_A_, ("Illugal character is useqd.\r\n"));
      000140 4Br49            [ 1]  285 	push	#<(__str_4+0)
      000142 4Bs00            [ 1]  286 	push	#((__str_4+0) >> 8)
      000144 CDr00r00         [ 4]  287 	call	_mib_printf
      000147 5B 02            [ 2]  288 	addw	sp, #2
                                    289 ;	./../../mib/stm8s_mib_debug_mem.c: 139: return FALSE;
      000149 5F               [ 1]  290 	clrw	x
      00014A CCr07rD7         [ 2]  291 	jp	00235$
      00014D                        292 00115$:
                                    293 ;	./../../mib/stm8s_mib_debug_mem.c: 141: wr_ADDR32(addr, l);
      00014D 1E 03            [ 2]  294 	ldw	x, (0x03, sp)
      00014F 16 0A            [ 2]  295 	ldw	y, (0x0a, sp)
      000151 EF 02            [ 2]  296 	ldw	(0x2, x), y
      000153 16 08            [ 2]  297 	ldw	y, (0x08, sp)
      000155 FF               [ 2]  298 	ldw	(x), y
                                    299 ;	./../../mib/stm8s_mib_debug_mem.c: 142: break;
      000156 CCr07rD5         [ 2]  300 	jp	00216$
                                    301 ;	./../../mib/stm8s_mib_debug_mem.c: 143: default:
      000159                        302 00116$:
                                    303 ;	./../../mib/stm8s_mib_debug_mem.c: 144: MibWriteDebugString(cptr->usage);
      000159 1E 24            [ 2]  304 	ldw	x, (0x24, sp)
      00015B EE 04            [ 2]  305 	ldw	x, (0x4, x)
      00015D CDr00r00         [ 4]  306 	call	_MibWriteDebugString
                                    307 ;	./../../mib/stm8s_mib_debug_mem.c: 145: return FALSE;
      000160 5F               [ 1]  308 	clrw	x
      000161 CCr07rD7         [ 2]  309 	jp	00235$
                                    310 ;	./../../mib/stm8s_mib_debug_mem.c: 146: }		
      000164                        311 00215$:
                                    312 ;	./../../mib/stm8s_mib_debug_mem.c: 148: else if (!strcmp(argv[1], "read")) // _CMD_MY_READ_
      000164 1E 26            [ 2]  313 	ldw	x, (0x26, sp)
      000166 FE               [ 2]  314 	ldw	x, (x)
      000167 4Br67            [ 1]  315 	push	#<(___str_5+0)
      000169 4Bs00            [ 1]  316 	push	#((___str_5+0) >> 8)
      00016B CDr00r00         [ 4]  317 	call	_strcmp
      00016E 5D               [ 2]  318 	tnzw	x
      00016F 27 03            [ 1]  319 	jreq	00579$
      000171 CCr02r28         [ 2]  320 	jp	00212$
      000174                        321 00579$:
                                    322 ;	./../../mib/stm8s_mib_debug_mem.c: 150: if (argc < 4)
      000174 1E 2C            [ 2]  323 	ldw	x, (0x2c, sp)
      000176 A3 00 04         [ 2]  324 	cpw	x, #0x0004
      000179 2E 0B            [ 1]  325 	jrsge	00119$
                                    326 ;	./../../mib/stm8s_mib_debug_mem.c: 152: MibWriteDebugString(cptr->usage);
      00017B 1E 24            [ 2]  327 	ldw	x, (0x24, sp)
      00017D EE 04            [ 2]  328 	ldw	x, (0x4, x)
      00017F CDr00r00         [ 4]  329 	call	_MibWriteDebugString
                                    330 ;	./../../mib/stm8s_mib_debug_mem.c: 153: return FALSE;
      000182 5F               [ 1]  331 	clrw	x
      000183 CCr07rD7         [ 2]  332 	jp	00235$
      000186                        333 00119$:
                                    334 ;	./../../mib/stm8s_mib_debug_mem.c: 155: if (!HexToInt(argv[3], &addr, 32))
      000186 96               [ 1]  335 	ldw	x, sp
      000187 5C               [ 1]  336 	incw	x
      000188 51               [ 1]  337 	exgw	x, y
      000189 1E 2E            [ 2]  338 	ldw	x, (0x2e, sp)
      00018B EE 06            [ 2]  339 	ldw	x, (0x6, x)
      00018D 4B 20            [ 1]  340 	push	#0x20
      00018F 4B 00            [ 1]  341 	push	#0x00
      000191 90 89            [ 2]  342 	pushw	y
      000193 CDr00r00         [ 4]  343 	call	_HexToInt
      000196 5D               [ 2]  344 	tnzw	x
      000197 26 0D            [ 1]  345 	jrne	00121$
                                    346 ;	./../../mib/stm8s_mib_debug_mem.c: 157: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      000199 4Br2C            [ 1]  347 	push	#<(__str_3+0)
      00019B 4Bs00            [ 1]  348 	push	#((__str_3+0) >> 8)
      00019D CDr00r00         [ 4]  349 	call	_mib_printf
      0001A0 5B 02            [ 2]  350 	addw	sp, #2
                                    351 ;	./../../mib/stm8s_mib_debug_mem.c: 158: return FALSE;
      0001A2 5F               [ 1]  352 	clrw	x
      0001A3 CCr07rD7         [ 2]  353 	jp	00235$
      0001A6                        354 00121$:
                                    355 ;	./../../mib/stm8s_mib_debug_mem.c: 160: ccprintf(_DEBUG_CMD_A_,("\taddress : 0x%08lx  ", addr));
      0001A6 1E 03            [ 2]  356 	ldw	x, (0x03, sp)
      0001A8 89               [ 2]  357 	pushw	x
      0001A9 1E 03            [ 2]  358 	ldw	x, (0x03, sp)
      0001AB 89               [ 2]  359 	pushw	x
      0001AC 4Br6C            [ 1]  360 	push	#<(__str_6+0)
      0001AE 4Bs00            [ 1]  361 	push	#((__str_6+0) >> 8)
      0001B0 CDr00r00         [ 4]  362 	call	_mib_printf
      0001B3 5B 06            [ 2]  363 	addw	sp, #6
                                    364 ;	./../../mib/stm8s_mib_debug_mem.c: 161: ccprintf(_DEBUG_CMD_A_, ("\tvalue   : "));
      0001B5 4Br81            [ 1]  365 	push	#<(__str_7+0)
      0001B7 4Bs00            [ 1]  366 	push	#((__str_7+0) >> 8)
      0001B9 CDr00r00         [ 4]  367 	call	_mib_printf
      0001BC 5B 02            [ 2]  368 	addw	sp, #2
                                    369 ;	./../../mib/stm8s_mib_debug_mem.c: 162: switch (argv[2][0])
      0001BE 1E 2E            [ 2]  370 	ldw	x, (0x2e, sp)
      0001C0 EE 04            [ 2]  371 	ldw	x, (0x4, x)
      0001C2 F6               [ 1]  372 	ld	a, (x)
      0001C3 A1 63            [ 1]  373 	cp	a, #0x63
      0001C5 27 0A            [ 1]  374 	jreq	00122$
      0001C7 A1 6C            [ 1]  375 	cp	a, #0x6c
      0001C9 27 2A            [ 1]  376 	jreq	00124$
      0001CB A1 73            [ 1]  377 	cp	a, #0x73
      0001CD 27 15            [ 1]  378 	jreq	00123$
      0001CF 20 3E            [ 2]  379 	jra	00125$
                                    380 ;	./../../mib/stm8s_mib_debug_mem.c: 164: case 'c':
      0001D1                        381 00122$:
                                    382 ;	./../../mib/stm8s_mib_debug_mem.c: 165: c = rd_ADDR8(addr);
      0001D1 1E 03            [ 2]  383 	ldw	x, (0x03, sp)
      0001D3 F6               [ 1]  384 	ld	a, (x)
      0001D4 6B 05            [ 1]  385 	ld	(0x05, sp), a
                                    386 ;	./../../mib/stm8s_mib_debug_mem.c: 166: ccprintf(_DEBUG_CMD_A_,("0x%02x ", c));
      0001D6 5F               [ 1]  387 	clrw	x
      0001D7 97               [ 1]  388 	ld	xl, a
      0001D8 89               [ 2]  389 	pushw	x
      0001D9 4Br8D            [ 1]  390 	push	#<(__str_8+0)
      0001DB 4Bs00            [ 1]  391 	push	#((__str_8+0) >> 8)
      0001DD CDr00r00         [ 4]  392 	call	_mib_printf
      0001E0 5B 04            [ 2]  393 	addw	sp, #4
                                    394 ;	./../../mib/stm8s_mib_debug_mem.c: 167: break;
      0001E2 20 38            [ 2]  395 	jra	00126$
                                    396 ;	./../../mib/stm8s_mib_debug_mem.c: 168: case 's':
      0001E4                        397 00123$:
                                    398 ;	./../../mib/stm8s_mib_debug_mem.c: 169: s = rd_ADDR16(addr);
      0001E4 1E 03            [ 2]  399 	ldw	x, (0x03, sp)
      0001E6 FE               [ 2]  400 	ldw	x, (x)
      0001E7 1F 06            [ 2]  401 	ldw	(0x06, sp), x
                                    402 ;	./../../mib/stm8s_mib_debug_mem.c: 170: ccprintf(_DEBUG_CMD_A_,("0x%04x", s));
      0001E9 89               [ 2]  403 	pushw	x
      0001EA 4Br95            [ 1]  404 	push	#<(__str_9+0)
      0001EC 4Bs00            [ 1]  405 	push	#((__str_9+0) >> 8)
      0001EE CDr00r00         [ 4]  406 	call	_mib_printf
      0001F1 5B 04            [ 2]  407 	addw	sp, #4
                                    408 ;	./../../mib/stm8s_mib_debug_mem.c: 171: break;
      0001F3 20 27            [ 2]  409 	jra	00126$
                                    410 ;	./../../mib/stm8s_mib_debug_mem.c: 172: case 'l':
      0001F5                        411 00124$:
                                    412 ;	./../../mib/stm8s_mib_debug_mem.c: 173: l = rd_ADDR32(addr);
      0001F5 1E 03            [ 2]  413 	ldw	x, (0x03, sp)
      0001F7 90 93            [ 1]  414 	ldw	y, x
      0001F9 90 EE 02         [ 2]  415 	ldw	y, (0x2, y)
      0001FC FE               [ 2]  416 	ldw	x, (x)
      0001FD 17 0A            [ 2]  417 	ldw	(0x0a, sp), y
      0001FF 1F 08            [ 2]  418 	ldw	(0x08, sp), x
                                    419 ;	./../../mib/stm8s_mib_debug_mem.c: 174: ccprintf(_DEBUG_CMD_A_,("0x%08lx", l));
      000201 90 89            [ 2]  420 	pushw	y
      000203 89               [ 2]  421 	pushw	x
      000204 4Br9C            [ 1]  422 	push	#<(__str_10+0)
      000206 4Bs00            [ 1]  423 	push	#((__str_10+0) >> 8)
      000208 CDr00r00         [ 4]  424 	call	_mib_printf
      00020B 5B 06            [ 2]  425 	addw	sp, #6
                                    426 ;	./../../mib/stm8s_mib_debug_mem.c: 175: break;
      00020D 20 0D            [ 2]  427 	jra	00126$
                                    428 ;	./../../mib/stm8s_mib_debug_mem.c: 176: default:
      00020F                        429 00125$:
                                    430 ;	./../../mib/stm8s_mib_debug_mem.c: 177: ccprintf(_DEBUG_CMD_A_, ("Error.\r\n"));
      00020F 4BrA4            [ 1]  431 	push	#<(__str_11+0)
      000211 4Bs00            [ 1]  432 	push	#((__str_11+0) >> 8)
      000213 CDr00r00         [ 4]  433 	call	_mib_printf
      000216 5B 02            [ 2]  434 	addw	sp, #2
                                    435 ;	./../../mib/stm8s_mib_debug_mem.c: 178: return FALSE;
      000218 5F               [ 1]  436 	clrw	x
      000219 CCr07rD7         [ 2]  437 	jp	00235$
                                    438 ;	./../../mib/stm8s_mib_debug_mem.c: 179: }
      00021C                        439 00126$:
                                    440 ;	./../../mib/stm8s_mib_debug_mem.c: 180: ccprintf(_DEBUG_CMD_A_, (".\r\n"));		
      00021C 4BrAD            [ 1]  441 	push	#<(__str_12+0)
      00021E 4Bs00            [ 1]  442 	push	#((__str_12+0) >> 8)
      000220 CDr00r00         [ 4]  443 	call	_mib_printf
      000223 5B 02            [ 2]  444 	addw	sp, #2
      000225 CCr07rD5         [ 2]  445 	jp	00216$
      000228                        446 00212$:
                                    447 ;	./../../mib/stm8s_mib_debug_mem.c: 182: else if (!strcmp(argv[1], "wrn")) // _CMD_MY_WRITE_
      000228 1E 26            [ 2]  448 	ldw	x, (0x26, sp)
      00022A FE               [ 2]  449 	ldw	x, (x)
      00022B 4BrB1            [ 1]  450 	push	#<(___str_13+0)
      00022D 4Bs00            [ 1]  451 	push	#((___str_13+0) >> 8)
      00022F CDr00r00         [ 4]  452 	call	_strcmp
      000232 5D               [ 2]  453 	tnzw	x
      000233 27 03            [ 1]  454 	jreq	00591$
      000235 CCr03rBF         [ 2]  455 	jp	00209$
      000238                        456 00591$:
                                    457 ;	./../../mib/stm8s_mib_debug_mem.c: 185: if (argc < 6)
      000238 1E 2C            [ 2]  458 	ldw	x, (0x2c, sp)
      00023A A3 00 06         [ 2]  459 	cpw	x, #0x0006
      00023D 2E 0B            [ 1]  460 	jrsge	00128$
                                    461 ;	./../../mib/stm8s_mib_debug_mem.c: 187: MibWriteDebugString(cptr->usage);
      00023F 1E 24            [ 2]  462 	ldw	x, (0x24, sp)
      000241 EE 04            [ 2]  463 	ldw	x, (0x4, x)
      000243 CDr00r00         [ 4]  464 	call	_MibWriteDebugString
                                    465 ;	./../../mib/stm8s_mib_debug_mem.c: 188: return FALSE;
      000246 5F               [ 1]  466 	clrw	x
      000247 CCr07rD7         [ 2]  467 	jp	00235$
      00024A                        468 00128$:
                                    469 ;	./../../mib/stm8s_mib_debug_mem.c: 190: if (!HexToInt(argv[3], &addr, 32))
      00024A 96               [ 1]  470 	ldw	x, sp
      00024B 5C               [ 1]  471 	incw	x
      00024C 51               [ 1]  472 	exgw	x, y
      00024D 1E 2E            [ 2]  473 	ldw	x, (0x2e, sp)
      00024F EE 06            [ 2]  474 	ldw	x, (0x6, x)
      000251 4B 20            [ 1]  475 	push	#0x20
      000253 4B 00            [ 1]  476 	push	#0x00
      000255 90 89            [ 2]  477 	pushw	y
      000257 CDr00r00         [ 4]  478 	call	_HexToInt
      00025A 5D               [ 2]  479 	tnzw	x
      00025B 26 0D            [ 1]  480 	jrne	00130$
                                    481 ;	./../../mib/stm8s_mib_debug_mem.c: 192: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      00025D 4Br2C            [ 1]  482 	push	#<(__str_3+0)
      00025F 4Bs00            [ 1]  483 	push	#((__str_3+0) >> 8)
      000261 CDr00r00         [ 4]  484 	call	_mib_printf
      000264 5B 02            [ 2]  485 	addw	sp, #2
                                    486 ;	./../../mib/stm8s_mib_debug_mem.c: 193: return FALSE;
      000266 5F               [ 1]  487 	clrw	x
      000267 CCr07rD7         [ 2]  488 	jp	00235$
      00026A                        489 00130$:
                                    490 ;	./../../mib/stm8s_mib_debug_mem.c: 195: if (!HexToInt(argv[5], &v_Loop, 32))
      00026A 96               [ 1]  491 	ldw	x, sp
      00026B 1C 00 18         [ 2]  492 	addw	x, #24
      00026E 51               [ 1]  493 	exgw	x, y
      00026F 1E 2E            [ 2]  494 	ldw	x, (0x2e, sp)
      000271 EE 0A            [ 2]  495 	ldw	x, (0xa, x)
      000273 4B 20            [ 1]  496 	push	#0x20
      000275 4B 00            [ 1]  497 	push	#0x00
      000277 90 89            [ 2]  498 	pushw	y
      000279 CDr00r00         [ 4]  499 	call	_HexToInt
      00027C 5D               [ 2]  500 	tnzw	x
      00027D 26 0D            [ 1]  501 	jrne	00132$
                                    502 ;	./../../mib/stm8s_mib_debug_mem.c: 197: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      00027F 4Br2C            [ 1]  503 	push	#<(__str_3+0)
      000281 4Bs00            [ 1]  504 	push	#((__str_3+0) >> 8)
      000283 CDr00r00         [ 4]  505 	call	_mib_printf
      000286 5B 02            [ 2]  506 	addw	sp, #2
                                    507 ;	./../../mib/stm8s_mib_debug_mem.c: 198: return FALSE;
      000288 5F               [ 1]  508 	clrw	x
      000289 CCr07rD7         [ 2]  509 	jp	00235$
      00028C                        510 00132$:
                                    511 ;	./../../mib/stm8s_mib_debug_mem.c: 200: switch (argv[2][0])
      00028C 1E 2E            [ 2]  512 	ldw	x, (0x2e, sp)
      00028E EE 04            [ 2]  513 	ldw	x, (0x4, x)
      000290 F6               [ 1]  514 	ld	a, (x)
      000291 A1 63            [ 1]  515 	cp	a, #0x63
      000293 27 0E            [ 1]  516 	jreq	00133$
      000295 A1 6C            [ 1]  517 	cp	a, #0x6c
      000297 26 03            [ 1]  518 	jrne	00599$
      000299 CCr03r50         [ 2]  519 	jp	00141$
      00029C                        520 00599$:
      00029C A1 73            [ 1]  521 	cp	a, #0x73
      00029E 27 55            [ 1]  522 	jreq	00137$
      0002A0 CCr03rAF         [ 2]  523 	jp	00145$
                                    524 ;	./../../mib/stm8s_mib_debug_mem.c: 202: case 'c':
      0002A3                        525 00133$:
                                    526 ;	./../../mib/stm8s_mib_debug_mem.c: 203: if (!HexToInt(argv[4], &c, 8))
      0002A3 96               [ 1]  527 	ldw	x, sp
      0002A4 1C 00 05         [ 2]  528 	addw	x, #5
      0002A7 16 2E            [ 2]  529 	ldw	y, (0x2e, sp)
      0002A9 90 EE 08         [ 2]  530 	ldw	y, (0x8, y)
      0002AC 4B 08            [ 1]  531 	push	#0x08
      0002AE 4B 00            [ 1]  532 	push	#0x00
      0002B0 89               [ 2]  533 	pushw	x
      0002B1 93               [ 1]  534 	ldw	x, y
      0002B2 CDr00r00         [ 4]  535 	call	_HexToInt
      0002B5 5D               [ 2]  536 	tnzw	x
      0002B6 26 0D            [ 1]  537 	jrne	00262$
                                    538 ;	./../../mib/stm8s_mib_debug_mem.c: 205: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0002B8 4Br2C            [ 1]  539 	push	#<(__str_3+0)
      0002BA 4Bs00            [ 1]  540 	push	#((__str_3+0) >> 8)
      0002BC CDr00r00         [ 4]  541 	call	_mib_printf
      0002BF 5B 02            [ 2]  542 	addw	sp, #2
                                    543 ;	./../../mib/stm8s_mib_debug_mem.c: 206: return FALSE;
      0002C1 5F               [ 1]  544 	clrw	x
      0002C2 CCr07rD7         [ 2]  545 	jp	00235$
      0002C5                        546 00262$:
      0002C5 16 1A            [ 2]  547 	ldw	y, (0x1a, sp)
      0002C7 17 28            [ 2]  548 	ldw	(0x28, sp), y
      0002C9 16 18            [ 2]  549 	ldw	y, (0x18, sp)
      0002CB 17 26            [ 2]  550 	ldw	(0x26, sp), y
      0002CD                        551 00218$:
                                    552 ;	./../../mib/stm8s_mib_debug_mem.c: 208: for (; v_Loop; v_Loop--) wr_ADDR8(addr, c);
      0002CD 1E 28            [ 2]  553 	ldw	x, (0x28, sp)
      0002CF 26 07            [ 1]  554 	jrne	00605$
      0002D1 1E 26            [ 2]  555 	ldw	x, (0x26, sp)
      0002D3 26 03            [ 1]  556 	jrne	00605$
      0002D5 CCr07rB9         [ 2]  557 	jp	00301$
      0002D8                        558 00605$:
      0002D8 1E 03            [ 2]  559 	ldw	x, (0x03, sp)
      0002DA 7B 05            [ 1]  560 	ld	a, (0x05, sp)
      0002DC F7               [ 1]  561 	ld	(x), a
      0002DD 1E 28            [ 2]  562 	ldw	x, (0x28, sp)
      0002DF 1D 00 01         [ 2]  563 	subw	x, #0x0001
      0002E2 1F 28            [ 2]  564 	ldw	(0x28, sp), x
      0002E4 1E 26            [ 2]  565 	ldw	x, (0x26, sp)
      0002E6 24 01            [ 1]  566 	jrnc	00606$
      0002E8 5A               [ 2]  567 	decw	x
      0002E9                        568 00606$:
      0002E9 1F 26            [ 2]  569 	ldw	(0x26, sp), x
      0002EB 16 28            [ 2]  570 	ldw	y, (0x28, sp)
      0002ED 17 1A            [ 2]  571 	ldw	(0x1a, sp), y
      0002EF 16 26            [ 2]  572 	ldw	y, (0x26, sp)
      0002F1 17 18            [ 2]  573 	ldw	(0x18, sp), y
      0002F3 20 D8            [ 2]  574 	jra	00218$
                                    575 ;	./../../mib/stm8s_mib_debug_mem.c: 210: case 's':
      0002F5                        576 00137$:
                                    577 ;	./../../mib/stm8s_mib_debug_mem.c: 211: if (!HexToInt(argv[4], &s, 16))
      0002F5 16 2E            [ 2]  578 	ldw	y, (0x2e, sp)
      0002F7 17 26            [ 2]  579 	ldw	(0x26, sp), y
      0002F9 93               [ 1]  580 	ldw	x, y
      0002FA EE 08            [ 2]  581 	ldw	x, (0x8, x)
      0002FC 1F 28            [ 2]  582 	ldw	(0x28, sp), x
      0002FE 4B 10            [ 1]  583 	push	#0x10
      000300 4B 00            [ 1]  584 	push	#0x00
      000302 96               [ 1]  585 	ldw	x, sp
      000303 1C 00 08         [ 2]  586 	addw	x, #8
      000306 89               [ 2]  587 	pushw	x
      000307 1E 2C            [ 2]  588 	ldw	x, (0x2c, sp)
      000309 CDr00r00         [ 4]  589 	call	_HexToInt
      00030C 1F 28            [ 2]  590 	ldw	(0x28, sp), x
      00030E 26 0D            [ 1]  591 	jrne	00265$
                                    592 ;	./../../mib/stm8s_mib_debug_mem.c: 213: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      000310 4Br2C            [ 1]  593 	push	#<(__str_3+0)
      000312 4Bs00            [ 1]  594 	push	#((__str_3+0) >> 8)
      000314 CDr00r00         [ 4]  595 	call	_mib_printf
      000317 5B 02            [ 2]  596 	addw	sp, #2
                                    597 ;	./../../mib/stm8s_mib_debug_mem.c: 214: return FALSE;
      000319 5F               [ 1]  598 	clrw	x
      00031A CCr07rD7         [ 2]  599 	jp	00235$
      00031D                        600 00265$:
      00031D 16 1A            [ 2]  601 	ldw	y, (0x1a, sp)
      00031F 17 28            [ 2]  602 	ldw	(0x28, sp), y
      000321 16 18            [ 2]  603 	ldw	y, (0x18, sp)
      000323 17 26            [ 2]  604 	ldw	(0x26, sp), y
      000325                        605 00221$:
                                    606 ;	./../../mib/stm8s_mib_debug_mem.c: 216: for (; v_Loop; v_Loop--) wr_ADDR16(addr, s);
      000325 1E 28            [ 2]  607 	ldw	x, (0x28, sp)
      000327 26 07            [ 1]  608 	jrne	00608$
      000329 1E 26            [ 2]  609 	ldw	x, (0x26, sp)
      00032B 26 03            [ 1]  610 	jrne	00608$
      00032D CCr07rC3         [ 2]  611 	jp	00302$
      000330                        612 00608$:
      000330 16 03            [ 2]  613 	ldw	y, (0x03, sp)
      000332 17 22            [ 2]  614 	ldw	(0x22, sp), y
      000334 93               [ 1]  615 	ldw	x, y
      000335 16 06            [ 2]  616 	ldw	y, (0x06, sp)
      000337 FF               [ 2]  617 	ldw	(x), y
      000338 1E 28            [ 2]  618 	ldw	x, (0x28, sp)
      00033A 1D 00 01         [ 2]  619 	subw	x, #0x0001
      00033D 1F 28            [ 2]  620 	ldw	(0x28, sp), x
      00033F 1E 26            [ 2]  621 	ldw	x, (0x26, sp)
      000341 24 01            [ 1]  622 	jrnc	00609$
      000343 5A               [ 2]  623 	decw	x
      000344                        624 00609$:
      000344 1F 26            [ 2]  625 	ldw	(0x26, sp), x
      000346 16 28            [ 2]  626 	ldw	y, (0x28, sp)
      000348 17 1A            [ 2]  627 	ldw	(0x1a, sp), y
      00034A 16 26            [ 2]  628 	ldw	y, (0x26, sp)
      00034C 17 18            [ 2]  629 	ldw	(0x18, sp), y
      00034E 20 D5            [ 2]  630 	jra	00221$
                                    631 ;	./../../mib/stm8s_mib_debug_mem.c: 218: case 'l':
      000350                        632 00141$:
                                    633 ;	./../../mib/stm8s_mib_debug_mem.c: 219: if (!HexToInt(argv[4], &l, 32))
      000350 16 2E            [ 2]  634 	ldw	y, (0x2e, sp)
      000352 17 26            [ 2]  635 	ldw	(0x26, sp), y
      000354 93               [ 1]  636 	ldw	x, y
      000355 EE 08            [ 2]  637 	ldw	x, (0x8, x)
      000357 1F 28            [ 2]  638 	ldw	(0x28, sp), x
      000359 4B 20            [ 1]  639 	push	#0x20
      00035B 4B 00            [ 1]  640 	push	#0x00
      00035D 96               [ 1]  641 	ldw	x, sp
      00035E 1C 00 0A         [ 2]  642 	addw	x, #10
      000361 89               [ 2]  643 	pushw	x
      000362 1E 2C            [ 2]  644 	ldw	x, (0x2c, sp)
      000364 CDr00r00         [ 4]  645 	call	_HexToInt
      000367 1F 28            [ 2]  646 	ldw	(0x28, sp), x
      000369 26 0D            [ 1]  647 	jrne	00268$
                                    648 ;	./../../mib/stm8s_mib_debug_mem.c: 221: ccprintf(_DEBUG_CMD_A_, ("Illugal character is useqd.\r\n"));
      00036B 4Br49            [ 1]  649 	push	#<(__str_4+0)
      00036D 4Bs00            [ 1]  650 	push	#((__str_4+0) >> 8)
      00036F CDr00r00         [ 4]  651 	call	_mib_printf
      000372 5B 02            [ 2]  652 	addw	sp, #2
                                    653 ;	./../../mib/stm8s_mib_debug_mem.c: 222: return FALSE;
      000374 5F               [ 1]  654 	clrw	x
      000375 CCr07rD7         [ 2]  655 	jp	00235$
      000378                        656 00268$:
      000378 16 1A            [ 2]  657 	ldw	y, (0x1a, sp)
      00037A 17 28            [ 2]  658 	ldw	(0x28, sp), y
      00037C 16 18            [ 2]  659 	ldw	y, (0x18, sp)
      00037E 17 26            [ 2]  660 	ldw	(0x26, sp), y
      000380                        661 00224$:
                                    662 ;	./../../mib/stm8s_mib_debug_mem.c: 224: for (; v_Loop; v_Loop--) wr_ADDR32(addr, l);
      000380 1E 28            [ 2]  663 	ldw	x, (0x28, sp)
      000382 26 07            [ 1]  664 	jrne	00611$
      000384 1E 26            [ 2]  665 	ldw	x, (0x26, sp)
      000386 26 03            [ 1]  666 	jrne	00611$
      000388 CCr07rCD         [ 2]  667 	jp	00303$
      00038B                        668 00611$:
      00038B 16 03            [ 2]  669 	ldw	y, (0x03, sp)
      00038D 17 22            [ 2]  670 	ldw	(0x22, sp), y
      00038F 93               [ 1]  671 	ldw	x, y
      000390 16 0A            [ 2]  672 	ldw	y, (0x0a, sp)
      000392 EF 02            [ 2]  673 	ldw	(0x2, x), y
      000394 16 08            [ 2]  674 	ldw	y, (0x08, sp)
      000396 FF               [ 2]  675 	ldw	(x), y
      000397 1E 28            [ 2]  676 	ldw	x, (0x28, sp)
      000399 1D 00 01         [ 2]  677 	subw	x, #0x0001
      00039C 1F 28            [ 2]  678 	ldw	(0x28, sp), x
      00039E 1E 26            [ 2]  679 	ldw	x, (0x26, sp)
      0003A0 24 01            [ 1]  680 	jrnc	00612$
      0003A2 5A               [ 2]  681 	decw	x
      0003A3                        682 00612$:
      0003A3 1F 26            [ 2]  683 	ldw	(0x26, sp), x
      0003A5 16 28            [ 2]  684 	ldw	y, (0x28, sp)
      0003A7 17 1A            [ 2]  685 	ldw	(0x1a, sp), y
      0003A9 16 26            [ 2]  686 	ldw	y, (0x26, sp)
      0003AB 17 18            [ 2]  687 	ldw	(0x18, sp), y
      0003AD 20 D1            [ 2]  688 	jra	00224$
                                    689 ;	./../../mib/stm8s_mib_debug_mem.c: 226: default:
      0003AF                        690 00145$:
                                    691 ;	./../../mib/stm8s_mib_debug_mem.c: 227: MibWriteDebugString(cptr->usage);
      0003AF 16 24            [ 2]  692 	ldw	y, (0x24, sp)
      0003B1 17 26            [ 2]  693 	ldw	(0x26, sp), y
      0003B3 93               [ 1]  694 	ldw	x, y
      0003B4 EE 04            [ 2]  695 	ldw	x, (0x4, x)
      0003B6 1F 28            [ 2]  696 	ldw	(0x28, sp), x
      0003B8 CDr00r00         [ 4]  697 	call	_MibWriteDebugString
                                    698 ;	./../../mib/stm8s_mib_debug_mem.c: 228: return FALSE;
      0003BB 5F               [ 1]  699 	clrw	x
      0003BC CCr07rD7         [ 2]  700 	jp	00235$
                                    701 ;	./../../mib/stm8s_mib_debug_mem.c: 229: }	
      0003BF                        702 00209$:
                                    703 ;	./../../mib/stm8s_mib_debug_mem.c: 231: else if (!strcmp(argv[1], "rdn")) // _CMD_MY_READ_
      0003BF 1E 26            [ 2]  704 	ldw	x, (0x26, sp)
      0003C1 FE               [ 2]  705 	ldw	x, (x)
      0003C2 1F 28            [ 2]  706 	ldw	(0x28, sp), x
      0003C4 4BrB5            [ 1]  707 	push	#<(___str_14+0)
      0003C6 4Bs00            [ 1]  708 	push	#((___str_14+0) >> 8)
      0003C8 1E 2A            [ 2]  709 	ldw	x, (0x2a, sp)
      0003CA CDr00r00         [ 4]  710 	call	_strcmp
      0003CD 1F 28            [ 2]  711 	ldw	(0x28, sp), x
      0003CF 27 03            [ 1]  712 	jreq	00613$
      0003D1 CCr05rB2         [ 2]  713 	jp	00206$
      0003D4                        714 00613$:
                                    715 ;	./../../mib/stm8s_mib_debug_mem.c: 234: if (argc < 5)
      0003D4 1E 2C            [ 2]  716 	ldw	x, (0x2c, sp)
      0003D6 A3 00 05         [ 2]  717 	cpw	x, #0x0005
      0003D9 2E 10            [ 1]  718 	jrsge	00148$
                                    719 ;	./../../mib/stm8s_mib_debug_mem.c: 236: MibWriteDebugString(cptr->usage);
      0003DB 16 24            [ 2]  720 	ldw	y, (0x24, sp)
      0003DD 17 26            [ 2]  721 	ldw	(0x26, sp), y
      0003DF 93               [ 1]  722 	ldw	x, y
      0003E0 EE 04            [ 2]  723 	ldw	x, (0x4, x)
      0003E2 1F 28            [ 2]  724 	ldw	(0x28, sp), x
      0003E4 CDr00r00         [ 4]  725 	call	_MibWriteDebugString
                                    726 ;	./../../mib/stm8s_mib_debug_mem.c: 237: return FALSE;
      0003E7 5F               [ 1]  727 	clrw	x
      0003E8 CCr07rD7         [ 2]  728 	jp	00235$
      0003EB                        729 00148$:
                                    730 ;	./../../mib/stm8s_mib_debug_mem.c: 239: if (!HexToInt(argv[3], &addr, 32))
      0003EB 16 2E            [ 2]  731 	ldw	y, (0x2e, sp)
      0003ED 17 26            [ 2]  732 	ldw	(0x26, sp), y
      0003EF 93               [ 1]  733 	ldw	x, y
      0003F0 EE 06            [ 2]  734 	ldw	x, (0x6, x)
      0003F2 1F 28            [ 2]  735 	ldw	(0x28, sp), x
      0003F4 4B 20            [ 1]  736 	push	#0x20
      0003F6 4B 00            [ 1]  737 	push	#0x00
      0003F8 96               [ 1]  738 	ldw	x, sp
      0003F9 1C 00 03         [ 2]  739 	addw	x, #3
      0003FC 89               [ 2]  740 	pushw	x
      0003FD 1E 2C            [ 2]  741 	ldw	x, (0x2c, sp)
      0003FF CDr00r00         [ 4]  742 	call	_HexToInt
      000402 1F 28            [ 2]  743 	ldw	(0x28, sp), x
      000404 26 0D            [ 1]  744 	jrne	00150$
                                    745 ;	./../../mib/stm8s_mib_debug_mem.c: 241: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      000406 4Br2C            [ 1]  746 	push	#<(__str_3+0)
      000408 4Bs00            [ 1]  747 	push	#((__str_3+0) >> 8)
      00040A CDr00r00         [ 4]  748 	call	_mib_printf
      00040D 5B 02            [ 2]  749 	addw	sp, #2
                                    750 ;	./../../mib/stm8s_mib_debug_mem.c: 242: return FALSE;
      00040F 5F               [ 1]  751 	clrw	x
      000410 CCr07rD7         [ 2]  752 	jp	00235$
      000413                        753 00150$:
                                    754 ;	./../../mib/stm8s_mib_debug_mem.c: 244: if (!HexToInt(argv[4], &v_Loop, 32))
      000413 16 2E            [ 2]  755 	ldw	y, (0x2e, sp)
      000415 17 26            [ 2]  756 	ldw	(0x26, sp), y
      000417 93               [ 1]  757 	ldw	x, y
      000418 EE 08            [ 2]  758 	ldw	x, (0x8, x)
      00041A 1F 28            [ 2]  759 	ldw	(0x28, sp), x
      00041C 4B 20            [ 1]  760 	push	#0x20
      00041E 4B 00            [ 1]  761 	push	#0x00
      000420 96               [ 1]  762 	ldw	x, sp
      000421 1C 00 1A         [ 2]  763 	addw	x, #26
      000424 89               [ 2]  764 	pushw	x
      000425 1E 2C            [ 2]  765 	ldw	x, (0x2c, sp)
      000427 CDr00r00         [ 4]  766 	call	_HexToInt
      00042A 1F 28            [ 2]  767 	ldw	(0x28, sp), x
      00042C 26 0D            [ 1]  768 	jrne	00152$
                                    769 ;	./../../mib/stm8s_mib_debug_mem.c: 246: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      00042E 4Br2C            [ 1]  770 	push	#<(__str_3+0)
      000430 4Bs00            [ 1]  771 	push	#((__str_3+0) >> 8)
      000432 CDr00r00         [ 4]  772 	call	_mib_printf
      000435 5B 02            [ 2]  773 	addw	sp, #2
                                    774 ;	./../../mib/stm8s_mib_debug_mem.c: 247: return FALSE;
      000437 5F               [ 1]  775 	clrw	x
      000438 CCr07rD7         [ 2]  776 	jp	00235$
      00043B                        777 00152$:
                                    778 ;	./../../mib/stm8s_mib_debug_mem.c: 249: ccprintf(_DEBUG_CMD_A_,("\taddress : 0x%08lx  ", addr));
      00043B 1E 03            [ 2]  779 	ldw	x, (0x03, sp)
      00043D 89               [ 2]  780 	pushw	x
      00043E 1E 03            [ 2]  781 	ldw	x, (0x03, sp)
      000440 89               [ 2]  782 	pushw	x
      000441 4Br6C            [ 1]  783 	push	#<(__str_6+0)
      000443 4Bs00            [ 1]  784 	push	#((__str_6+0) >> 8)
      000445 CDr00r00         [ 4]  785 	call	_mib_printf
      000448 5B 06            [ 2]  786 	addw	sp, #6
                                    787 ;	./../../mib/stm8s_mib_debug_mem.c: 250: ccprintf(_DEBUG_CMD_A_,("loop : 0x%08lx  \r\n", v_Loop));
      00044A 1E 1A            [ 2]  788 	ldw	x, (0x1a, sp)
      00044C 89               [ 2]  789 	pushw	x
      00044D 1E 1A            [ 2]  790 	ldw	x, (0x1a, sp)
      00044F 89               [ 2]  791 	pushw	x
      000450 4BrB9            [ 1]  792 	push	#<(__str_15+0)
      000452 4Bs00            [ 1]  793 	push	#((__str_15+0) >> 8)
      000454 CDr00r00         [ 4]  794 	call	_mib_printf
      000457 5B 06            [ 2]  795 	addw	sp, #6
                                    796 ;	./../../mib/stm8s_mib_debug_mem.c: 251: ccprintf(_DEBUG_CMD_A_, ("value   : "));
      000459 4BrCC            [ 1]  797 	push	#<(__str_16+0)
      00045B 4Bs00            [ 1]  798 	push	#((__str_16+0) >> 8)
      00045D CDr00r00         [ 4]  799 	call	_mib_printf
      000460 5B 02            [ 2]  800 	addw	sp, #2
                                    801 ;	./../../mib/stm8s_mib_debug_mem.c: 252: switch (argv[2][0])
      000462 16 2E            [ 2]  802 	ldw	y, (0x2e, sp)
      000464 17 26            [ 2]  803 	ldw	(0x26, sp), y
      000466 93               [ 1]  804 	ldw	x, y
      000467 EE 04            [ 2]  805 	ldw	x, (0x4, x)
      000469 1F 28            [ 2]  806 	ldw	(0x28, sp), x
      00046B F6               [ 1]  807 	ld	a, (x)
      00046C A1 63            [ 1]  808 	cp	a, #0x63
      00046E 27 0E            [ 1]  809 	jreq	00278$
      000470 A1 6C            [ 1]  810 	cp	a, #0x6c
      000472 26 03            [ 1]  811 	jrne	00621$
      000474 CCr05r23         [ 2]  812 	jp	00284$
      000477                        813 00621$:
      000477 A1 73            [ 1]  814 	cp	a, #0x73
      000479 27 59            [ 1]  815 	jreq	00281$
      00047B CCr05r7D         [ 2]  816 	jp	00165$
                                    817 ;	./../../mib/stm8s_mib_debug_mem.c: 254: case 'c':
      00047E                        818 00278$:
      00047E 16 1A            [ 2]  819 	ldw	y, (0x1a, sp)
      000480 17 28            [ 2]  820 	ldw	(0x28, sp), y
      000482 16 18            [ 2]  821 	ldw	y, (0x18, sp)
      000484 17 26            [ 2]  822 	ldw	(0x26, sp), y
      000486                        823 00227$:
                                    824 ;	./../../mib/stm8s_mib_debug_mem.c: 255: for (; v_Loop; v_Loop--)
      000486 1E 28            [ 2]  825 	ldw	x, (0x28, sp)
      000488 26 07            [ 1]  826 	jrne	00626$
      00048A 1E 26            [ 2]  827 	ldw	x, (0x26, sp)
      00048C 26 03            [ 1]  828 	jrne	00626$
      00048E CCr05r8A         [ 2]  829 	jp	00304$
      000491                        830 00626$:
                                    831 ;	./../../mib/stm8s_mib_debug_mem.c: 257: c = rd_ADDR8(addr);
      000491 16 03            [ 2]  832 	ldw	y, (0x03, sp)
      000493 17 22            [ 2]  833 	ldw	(0x22, sp), y
      000495 93               [ 1]  834 	ldw	x, y
      000496 F6               [ 1]  835 	ld	a, (x)
      000497 6B 1F            [ 1]  836 	ld	(0x1f, sp), a
      000499 6B 05            [ 1]  837 	ld	(0x05, sp), a
                                    838 ;	./../../mib/stm8s_mib_debug_mem.c: 258: if ((v_Loop & 0xfffff) == 0)
      00049B 16 28            [ 2]  839 	ldw	y, (0x28, sp)
      00049D 17 22            [ 2]  840 	ldw	(0x22, sp), y
      00049F 7B 27            [ 1]  841 	ld	a, (0x27, sp)
      0004A1 A4 0F            [ 1]  842 	and	a, #0x0f
      0004A3 6B 21            [ 1]  843 	ld	(0x21, sp), a
      0004A5 0F 20            [ 1]  844 	clr	(0x20, sp)
      0004A7 1E 22            [ 2]  845 	ldw	x, (0x22, sp)
      0004A9 26 11            [ 1]  846 	jrne	00228$
                                    847 ;	./../../mib/stm8s_mib_debug_mem.c: 260: ccprintf(_DEBUG_CMD_A_,("0x%02x ", c));
      0004AB 1E 20            [ 2]  848 	ldw	x, (0x20, sp)
      0004AD 26 0D            [ 1]  849 	jrne	00228$
      0004AF 7B 1F            [ 1]  850 	ld	a, (0x1f, sp)
      0004B1 97               [ 1]  851 	ld	xl, a
      0004B2 89               [ 2]  852 	pushw	x
      0004B3 4Br8D            [ 1]  853 	push	#<(__str_8+0)
      0004B5 4Bs00            [ 1]  854 	push	#((__str_8+0) >> 8)
      0004B7 CDr00r00         [ 4]  855 	call	_mib_printf
      0004BA 5B 04            [ 2]  856 	addw	sp, #4
      0004BC                        857 00228$:
                                    858 ;	./../../mib/stm8s_mib_debug_mem.c: 255: for (; v_Loop; v_Loop--)
      0004BC 1E 28            [ 2]  859 	ldw	x, (0x28, sp)
      0004BE 1D 00 01         [ 2]  860 	subw	x, #0x0001
      0004C1 1F 28            [ 2]  861 	ldw	(0x28, sp), x
      0004C3 1E 26            [ 2]  862 	ldw	x, (0x26, sp)
      0004C5 24 01            [ 1]  863 	jrnc	00629$
      0004C7 5A               [ 2]  864 	decw	x
      0004C8                        865 00629$:
      0004C8 1F 26            [ 2]  866 	ldw	(0x26, sp), x
      0004CA 16 28            [ 2]  867 	ldw	y, (0x28, sp)
      0004CC 17 1A            [ 2]  868 	ldw	(0x1a, sp), y
      0004CE 16 26            [ 2]  869 	ldw	y, (0x26, sp)
      0004D0 17 18            [ 2]  870 	ldw	(0x18, sp), y
      0004D2 20 B2            [ 2]  871 	jra	00227$
                                    872 ;	./../../mib/stm8s_mib_debug_mem.c: 264: case 's':
      0004D4                        873 00281$:
      0004D4 16 1A            [ 2]  874 	ldw	y, (0x1a, sp)
      0004D6 17 28            [ 2]  875 	ldw	(0x28, sp), y
      0004D8 16 18            [ 2]  876 	ldw	y, (0x18, sp)
      0004DA 17 26            [ 2]  877 	ldw	(0x26, sp), y
      0004DC                        878 00230$:
                                    879 ;	./../../mib/stm8s_mib_debug_mem.c: 265: for (; v_Loop; v_Loop--)
      0004DC 1E 28            [ 2]  880 	ldw	x, (0x28, sp)
      0004DE 26 07            [ 1]  881 	jrne	00630$
      0004E0 1E 26            [ 2]  882 	ldw	x, (0x26, sp)
      0004E2 26 03            [ 1]  883 	jrne	00630$
      0004E4 CCr05r94         [ 2]  884 	jp	00305$
      0004E7                        885 00630$:
                                    886 ;	./../../mib/stm8s_mib_debug_mem.c: 267: s = rd_ADDR16(addr);
      0004E7 1E 03            [ 2]  887 	ldw	x, (0x03, sp)
      0004E9 FE               [ 2]  888 	ldw	x, (x)
      0004EA 1F 1E            [ 2]  889 	ldw	(0x1e, sp), x
      0004EC 1F 06            [ 2]  890 	ldw	(0x06, sp), x
                                    891 ;	./../../mib/stm8s_mib_debug_mem.c: 268: if ((v_Loop & 0xfffff) == 0)
      0004EE 16 28            [ 2]  892 	ldw	y, (0x28, sp)
      0004F0 17 22            [ 2]  893 	ldw	(0x22, sp), y
      0004F2 5F               [ 1]  894 	clrw	x
      0004F3 7B 27            [ 1]  895 	ld	a, (0x27, sp)
      0004F5 A4 0F            [ 1]  896 	and	a, #0x0f
      0004F7 97               [ 1]  897 	ld	xl, a
      0004F8 16 22            [ 2]  898 	ldw	y, (0x22, sp)
      0004FA 26 0F            [ 1]  899 	jrne	00231$
      0004FC 5D               [ 2]  900 	tnzw	x
      0004FD 26 0C            [ 1]  901 	jrne	00231$
                                    902 ;	./../../mib/stm8s_mib_debug_mem.c: 270: ccprintf(_DEBUG_CMD_A_,("0x%04x ", s));
      0004FF 1E 1E            [ 2]  903 	ldw	x, (0x1e, sp)
      000501 89               [ 2]  904 	pushw	x
      000502 4BrD7            [ 1]  905 	push	#<(__str_17+0)
      000504 4Bs00            [ 1]  906 	push	#((__str_17+0) >> 8)
      000506 CDr00r00         [ 4]  907 	call	_mib_printf
      000509 5B 04            [ 2]  908 	addw	sp, #4
      00050B                        909 00231$:
                                    910 ;	./../../mib/stm8s_mib_debug_mem.c: 265: for (; v_Loop; v_Loop--)
      00050B 1E 28            [ 2]  911 	ldw	x, (0x28, sp)
      00050D 1D 00 01         [ 2]  912 	subw	x, #0x0001
      000510 1F 28            [ 2]  913 	ldw	(0x28, sp), x
      000512 1E 26            [ 2]  914 	ldw	x, (0x26, sp)
      000514 24 01            [ 1]  915 	jrnc	00633$
      000516 5A               [ 2]  916 	decw	x
      000517                        917 00633$:
      000517 1F 26            [ 2]  918 	ldw	(0x26, sp), x
      000519 16 28            [ 2]  919 	ldw	y, (0x28, sp)
      00051B 17 1A            [ 2]  920 	ldw	(0x1a, sp), y
      00051D 16 26            [ 2]  921 	ldw	y, (0x26, sp)
      00051F 17 18            [ 2]  922 	ldw	(0x18, sp), y
      000521 20 B9            [ 2]  923 	jra	00230$
                                    924 ;	./../../mib/stm8s_mib_debug_mem.c: 274: case 'l':
      000523                        925 00284$:
      000523 16 1A            [ 2]  926 	ldw	y, (0x1a, sp)
      000525 17 28            [ 2]  927 	ldw	(0x28, sp), y
      000527 16 18            [ 2]  928 	ldw	y, (0x18, sp)
      000529 17 26            [ 2]  929 	ldw	(0x26, sp), y
      00052B                        930 00233$:
                                    931 ;	./../../mib/stm8s_mib_debug_mem.c: 275: for (; v_Loop; v_Loop--)
      00052B 1E 28            [ 2]  932 	ldw	x, (0x28, sp)
      00052D 26 04            [ 1]  933 	jrne	00634$
      00052F 1E 26            [ 2]  934 	ldw	x, (0x26, sp)
      000531 27 6B            [ 1]  935 	jreq	00306$
      000533                        936 00634$:
                                    937 ;	./../../mib/stm8s_mib_debug_mem.c: 277: l = rd_ADDR32(addr);
      000533 1E 03            [ 2]  938 	ldw	x, (0x03, sp)
      000535 90 93            [ 1]  939 	ldw	y, x
      000537 90 EE 02         [ 2]  940 	ldw	y, (0x2, y)
      00053A FE               [ 2]  941 	ldw	x, (x)
      00053B 1F 1C            [ 2]  942 	ldw	(0x1c, sp), x
      00053D 17 0A            [ 2]  943 	ldw	(0x0a, sp), y
      00053F 1E 1C            [ 2]  944 	ldw	x, (0x1c, sp)
      000541 1F 08            [ 2]  945 	ldw	(0x08, sp), x
                                    946 ;	./../../mib/stm8s_mib_debug_mem.c: 278: if ((v_Loop & 0xfffff) == 0)
      000543 1E 28            [ 2]  947 	ldw	x, (0x28, sp)
      000545 1F 22            [ 2]  948 	ldw	(0x22, sp), x
      000547 7B 27            [ 1]  949 	ld	a, (0x27, sp)
      000549 A4 0F            [ 1]  950 	and	a, #0x0f
      00054B 6B 21            [ 1]  951 	ld	(0x21, sp), a
      00054D 0F 20            [ 1]  952 	clr	(0x20, sp)
      00054F 1E 22            [ 2]  953 	ldw	x, (0x22, sp)
      000551 26 12            [ 1]  954 	jrne	00234$
      000553 1E 20            [ 2]  955 	ldw	x, (0x20, sp)
      000555 26 0E            [ 1]  956 	jrne	00234$
                                    957 ;	./../../mib/stm8s_mib_debug_mem.c: 280: ccprintf(_DEBUG_CMD_A_,("0x%08lx ", l));
      000557 90 89            [ 2]  958 	pushw	y
      000559 1E 1E            [ 2]  959 	ldw	x, (0x1e, sp)
      00055B 89               [ 2]  960 	pushw	x
      00055C 4BrDF            [ 1]  961 	push	#<(__str_18+0)
      00055E 4Bs00            [ 1]  962 	push	#((__str_18+0) >> 8)
      000560 CDr00r00         [ 4]  963 	call	_mib_printf
      000563 5B 06            [ 2]  964 	addw	sp, #6
      000565                        965 00234$:
                                    966 ;	./../../mib/stm8s_mib_debug_mem.c: 275: for (; v_Loop; v_Loop--)
      000565 1E 28            [ 2]  967 	ldw	x, (0x28, sp)
      000567 1D 00 01         [ 2]  968 	subw	x, #0x0001
      00056A 1F 28            [ 2]  969 	ldw	(0x28, sp), x
      00056C 1E 26            [ 2]  970 	ldw	x, (0x26, sp)
      00056E 24 01            [ 1]  971 	jrnc	00637$
      000570 5A               [ 2]  972 	decw	x
      000571                        973 00637$:
      000571 1F 26            [ 2]  974 	ldw	(0x26, sp), x
      000573 16 28            [ 2]  975 	ldw	y, (0x28, sp)
      000575 17 1A            [ 2]  976 	ldw	(0x1a, sp), y
      000577 16 26            [ 2]  977 	ldw	y, (0x26, sp)
      000579 17 18            [ 2]  978 	ldw	(0x18, sp), y
      00057B 20 AE            [ 2]  979 	jra	00233$
                                    980 ;	./../../mib/stm8s_mib_debug_mem.c: 284: default:
      00057D                        981 00165$:
                                    982 ;	./../../mib/stm8s_mib_debug_mem.c: 285: ccprintf(_DEBUG_CMD_A_, ("Error.\r\n"));
      00057D 4BrA4            [ 1]  983 	push	#<(__str_11+0)
      00057F 4Bs00            [ 1]  984 	push	#((__str_11+0) >> 8)
      000581 CDr00r00         [ 4]  985 	call	_mib_printf
      000584 5B 02            [ 2]  986 	addw	sp, #2
                                    987 ;	./../../mib/stm8s_mib_debug_mem.c: 286: return FALSE;
      000586 5F               [ 1]  988 	clrw	x
      000587 CCr07rD7         [ 2]  989 	jp	00235$
                                    990 ;	./../../mib/stm8s_mib_debug_mem.c: 287: }
      00058A                        991 00304$:
      00058A 16 28            [ 2]  992 	ldw	y, (0x28, sp)
      00058C 17 1A            [ 2]  993 	ldw	(0x1a, sp), y
      00058E 16 26            [ 2]  994 	ldw	y, (0x26, sp)
      000590 17 18            [ 2]  995 	ldw	(0x18, sp), y
                                    996 ;	./../../mib/stm8s_mib_debug_mem.c: 351: return FALSE;
      000592 20 12            [ 2]  997 	jra	00166$
                                    998 ;	./../../mib/stm8s_mib_debug_mem.c: 287: }
      000594                        999 00305$:
      000594 16 28            [ 2] 1000 	ldw	y, (0x28, sp)
      000596 17 1A            [ 2] 1001 	ldw	(0x1a, sp), y
      000598 16 26            [ 2] 1002 	ldw	y, (0x26, sp)
      00059A 17 18            [ 2] 1003 	ldw	(0x18, sp), y
                                   1004 ;	./../../mib/stm8s_mib_debug_mem.c: 351: return FALSE;
      00059C 20 08            [ 2] 1005 	jra	00166$
                                   1006 ;	./../../mib/stm8s_mib_debug_mem.c: 287: }
      00059E                       1007 00306$:
      00059E 16 28            [ 2] 1008 	ldw	y, (0x28, sp)
      0005A0 17 1A            [ 2] 1009 	ldw	(0x1a, sp), y
      0005A2 16 26            [ 2] 1010 	ldw	y, (0x26, sp)
      0005A4 17 18            [ 2] 1011 	ldw	(0x18, sp), y
      0005A6                       1012 00166$:
                                   1013 ;	./../../mib/stm8s_mib_debug_mem.c: 288: ccprintf(_DEBUG_CMD_A_, (".\r\n"));
      0005A6 4BrAD            [ 1] 1014 	push	#<(__str_12+0)
      0005A8 4Bs00            [ 1] 1015 	push	#((__str_12+0) >> 8)
      0005AA CDr00r00         [ 4] 1016 	call	_mib_printf
      0005AD 5B 02            [ 2] 1017 	addw	sp, #2
      0005AF CCr07rD5         [ 2] 1018 	jp	00216$
      0005B2                       1019 00206$:
                                   1020 ;	./../../mib/stm8s_mib_debug_mem.c: 290: else if (!strcmp(argv[1], "hdump")) 	// _CMD_MY_HEXDUMP_
      0005B2 1E 26            [ 2] 1021 	ldw	x, (0x26, sp)
      0005B4 FE               [ 2] 1022 	ldw	x, (x)
      0005B5 4BrE8            [ 1] 1023 	push	#<(___str_19+0)
      0005B7 4Bs00            [ 1] 1024 	push	#((___str_19+0) >> 8)
      0005B9 CDr00r00         [ 4] 1025 	call	_strcmp
      0005BC 5D               [ 2] 1026 	tnzw	x
      0005BD 26 5B            [ 1] 1027 	jrne	00203$
                                   1028 ;	./../../mib/stm8s_mib_debug_mem.c: 292: if (argc < 4)
      0005BF 1E 2C            [ 2] 1029 	ldw	x, (0x2c, sp)
      0005C1 A3 00 04         [ 2] 1030 	cpw	x, #0x0004
      0005C4 2E 0B            [ 1] 1031 	jrsge	00168$
                                   1032 ;	./../../mib/stm8s_mib_debug_mem.c: 294: MibWriteDebugString(cptr->usage);
      0005C6 1E 24            [ 2] 1033 	ldw	x, (0x24, sp)
      0005C8 EE 04            [ 2] 1034 	ldw	x, (0x4, x)
      0005CA CDr00r00         [ 4] 1035 	call	_MibWriteDebugString
                                   1036 ;	./../../mib/stm8s_mib_debug_mem.c: 295: return FALSE;
      0005CD 5F               [ 1] 1037 	clrw	x
      0005CE CCr07rD7         [ 2] 1038 	jp	00235$
      0005D1                       1039 00168$:
                                   1040 ;	./../../mib/stm8s_mib_debug_mem.c: 297: if (!HexToInt(argv[2], &addr, 32) || !HexToInt(argv[3], &len, 32))
      0005D1 16 2E            [ 2] 1041 	ldw	y, (0x2e, sp)
      0005D3 90 EE 04         [ 2] 1042 	ldw	y, (0x4, y)
      0005D6 4B 20            [ 1] 1043 	push	#0x20
      0005D8 4B 00            [ 1] 1044 	push	#0x00
      0005DA 96               [ 1] 1045 	ldw	x, sp
      0005DB 1C 00 03         [ 2] 1046 	addw	x, #3
      0005DE 89               [ 2] 1047 	pushw	x
      0005DF 93               [ 1] 1048 	ldw	x, y
      0005E0 CDr00r00         [ 4] 1049 	call	_HexToInt
      0005E3 5D               [ 2] 1050 	tnzw	x
      0005E4 27 15            [ 1] 1051 	jreq	00169$
      0005E6 16 2E            [ 2] 1052 	ldw	y, (0x2e, sp)
      0005E8 90 EE 06         [ 2] 1053 	ldw	y, (0x6, y)
      0005EB 4B 20            [ 1] 1054 	push	#0x20
      0005ED 4B 00            [ 1] 1055 	push	#0x00
      0005EF 96               [ 1] 1056 	ldw	x, sp
      0005F0 1C 00 16         [ 2] 1057 	addw	x, #22
      0005F3 89               [ 2] 1058 	pushw	x
      0005F4 93               [ 1] 1059 	ldw	x, y
      0005F5 CDr00r00         [ 4] 1060 	call	_HexToInt
      0005F8 5D               [ 2] 1061 	tnzw	x
      0005F9 26 0D            [ 1] 1062 	jrne	00170$
      0005FB                       1063 00169$:
                                   1064 ;	./../../mib/stm8s_mib_debug_mem.c: 299: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0005FB 4Br2C            [ 1] 1065 	push	#<(__str_3+0)
      0005FD 4Bs00            [ 1] 1066 	push	#((__str_3+0) >> 8)
      0005FF CDr00r00         [ 4] 1067 	call	_mib_printf
      000602 5B 02            [ 2] 1068 	addw	sp, #2
                                   1069 ;	./../../mib/stm8s_mib_debug_mem.c: 300: return FALSE;
      000604 5F               [ 1] 1070 	clrw	x
      000605 CCr07rD7         [ 2] 1071 	jp	00235$
      000608                       1072 00170$:
                                   1073 ;	./../../mib/stm8s_mib_debug_mem.c: 302: HexDump(addr, len);		
      000608 1E 16            [ 2] 1074 	ldw	x, (0x16, sp)
      00060A 89               [ 2] 1075 	pushw	x
      00060B 1E 16            [ 2] 1076 	ldw	x, (0x16, sp)
      00060D 89               [ 2] 1077 	pushw	x
      00060E 1E 07            [ 2] 1078 	ldw	x, (0x07, sp)
      000610 89               [ 2] 1079 	pushw	x
      000611 1E 07            [ 2] 1080 	ldw	x, (0x07, sp)
      000613 89               [ 2] 1081 	pushw	x
      000614 CDr00r00         [ 4] 1082 	call	_HexDump
      000617 CCr07rD5         [ 2] 1083 	jp	00216$
      00061A                       1084 00203$:
                                   1085 ;	./../../mib/stm8s_mib_debug_mem.c: 304: else if (!strcmp(argv[1], "cpy")) // _CMD_MY_MEMCPY_
      00061A 1E 26            [ 2] 1086 	ldw	x, (0x26, sp)
      00061C FE               [ 2] 1087 	ldw	x, (x)
      00061D 4BrEE            [ 1] 1088 	push	#<(___str_20+0)
      00061F 4Bs00            [ 1] 1089 	push	#((___str_20+0) >> 8)
      000621 CDr00r00         [ 4] 1090 	call	_strcmp
      000624 5D               [ 2] 1091 	tnzw	x
      000625 26 71            [ 1] 1092 	jrne	00200$
                                   1093 ;	./../../mib/stm8s_mib_debug_mem.c: 306: if (argc < 5)
      000627 1E 2C            [ 2] 1094 	ldw	x, (0x2c, sp)
      000629 A3 00 05         [ 2] 1095 	cpw	x, #0x0005
      00062C 2E 0B            [ 1] 1096 	jrsge	00173$
                                   1097 ;	./../../mib/stm8s_mib_debug_mem.c: 308: MibWriteDebugString(cptr->usage);
      00062E 1E 24            [ 2] 1098 	ldw	x, (0x24, sp)
      000630 EE 04            [ 2] 1099 	ldw	x, (0x4, x)
      000632 CDr00r00         [ 4] 1100 	call	_MibWriteDebugString
                                   1101 ;	./../../mib/stm8s_mib_debug_mem.c: 309: return FALSE;
      000635 5F               [ 1] 1102 	clrw	x
      000636 CCr07rD7         [ 2] 1103 	jp	00235$
      000639                       1104 00173$:
                                   1105 ;	./../../mib/stm8s_mib_debug_mem.c: 311: if (!HexToInt(argv[2], &dest, 32) || !HexToInt(argv[3], &src, 32) || !HexToInt(argv[4], &len, 32))
      000639 16 2E            [ 2] 1106 	ldw	y, (0x2e, sp)
      00063B 90 EE 04         [ 2] 1107 	ldw	y, (0x4, y)
      00063E 4B 20            [ 1] 1108 	push	#0x20
      000640 4B 00            [ 1] 1109 	push	#0x00
      000642 96               [ 1] 1110 	ldw	x, sp
      000643 1C 00 0E         [ 2] 1111 	addw	x, #14
      000646 89               [ 2] 1112 	pushw	x
      000647 93               [ 1] 1113 	ldw	x, y
      000648 CDr00r00         [ 4] 1114 	call	_HexToInt
      00064B 5D               [ 2] 1115 	tnzw	x
      00064C 27 2A            [ 1] 1116 	jreq	00174$
      00064E 16 2E            [ 2] 1117 	ldw	y, (0x2e, sp)
      000650 90 EE 06         [ 2] 1118 	ldw	y, (0x6, y)
      000653 4B 20            [ 1] 1119 	push	#0x20
      000655 4B 00            [ 1] 1120 	push	#0x00
      000657 96               [ 1] 1121 	ldw	x, sp
      000658 1C 00 12         [ 2] 1122 	addw	x, #18
      00065B 89               [ 2] 1123 	pushw	x
      00065C 93               [ 1] 1124 	ldw	x, y
      00065D CDr00r00         [ 4] 1125 	call	_HexToInt
      000660 5D               [ 2] 1126 	tnzw	x
      000661 27 15            [ 1] 1127 	jreq	00174$
      000663 16 2E            [ 2] 1128 	ldw	y, (0x2e, sp)
      000665 90 EE 08         [ 2] 1129 	ldw	y, (0x8, y)
      000668 4B 20            [ 1] 1130 	push	#0x20
      00066A 4B 00            [ 1] 1131 	push	#0x00
      00066C 96               [ 1] 1132 	ldw	x, sp
      00066D 1C 00 16         [ 2] 1133 	addw	x, #22
      000670 89               [ 2] 1134 	pushw	x
      000671 93               [ 1] 1135 	ldw	x, y
      000672 CDr00r00         [ 4] 1136 	call	_HexToInt
      000675 5D               [ 2] 1137 	tnzw	x
      000676 26 0D            [ 1] 1138 	jrne	00175$
      000678                       1139 00174$:
                                   1140 ;	./../../mib/stm8s_mib_debug_mem.c: 313: ccprintf(_DEBUG_CMD_A_, ("Illegal character is used.\r\n"));
      000678 4BrF2            [ 1] 1141 	push	#<(__str_21+0)
      00067A 4Bs00            [ 1] 1142 	push	#((__str_21+0) >> 8)
      00067C CDr00r00         [ 4] 1143 	call	_mib_printf
      00067F 5B 02            [ 2] 1144 	addw	sp, #2
                                   1145 ;	./../../mib/stm8s_mib_debug_mem.c: 314: return FALSE;
      000681 5F               [ 1] 1146 	clrw	x
      000682 CCr07rD7         [ 2] 1147 	jp	00235$
      000685                       1148 00175$:
                                   1149 ;	./../../mib/stm8s_mib_debug_mem.c: 316: memcpy((char *)dest, (char *)src, len);		
      000685 1E 16            [ 2] 1150 	ldw	x, (0x16, sp)
      000687 16 12            [ 2] 1151 	ldw	y, (0x12, sp)
      000689 17 28            [ 2] 1152 	ldw	(0x28, sp), y
      00068B 16 0E            [ 2] 1153 	ldw	y, (0x0e, sp)
      00068D 89               [ 2] 1154 	pushw	x
      00068E 1E 2A            [ 2] 1155 	ldw	x, (0x2a, sp)
      000690 89               [ 2] 1156 	pushw	x
      000691 93               [ 1] 1157 	ldw	x, y
      000692 CDr00r00         [ 4] 1158 	call	___memcpy
      000695 CCr07rD5         [ 2] 1159 	jp	00216$
      000698                       1160 00200$:
                                   1161 ;	./../../mib/stm8s_mib_debug_mem.c: 318: else if (!strcmp(argv[1], "cmp")) // _CMD_MY_MEMCMP_
      000698 1E 26            [ 2] 1162 	ldw	x, (0x26, sp)
      00069A FE               [ 2] 1163 	ldw	x, (x)
      00069B 4Br0F            [ 1] 1164 	push	#<(___str_22+0)
      00069D 4Bs01            [ 1] 1165 	push	#((___str_22+0) >> 8)
      00069F CDr00r00         [ 4] 1166 	call	_strcmp
      0006A2 5D               [ 2] 1167 	tnzw	x
      0006A3 27 03            [ 1] 1168 	jreq	00647$
      0006A5 CCr07r31         [ 2] 1169 	jp	00197$
      0006A8                       1170 00647$:
                                   1171 ;	./../../mib/stm8s_mib_debug_mem.c: 320: if (argc < 5)
      0006A8 1E 2C            [ 2] 1172 	ldw	x, (0x2c, sp)
      0006AA A3 00 05         [ 2] 1173 	cpw	x, #0x0005
      0006AD 2E 0B            [ 1] 1174 	jrsge	00179$
                                   1175 ;	./../../mib/stm8s_mib_debug_mem.c: 322: MibWriteDebugString(cptr->usage);
      0006AF 1E 24            [ 2] 1176 	ldw	x, (0x24, sp)
      0006B1 EE 04            [ 2] 1177 	ldw	x, (0x4, x)
      0006B3 CDr00r00         [ 4] 1178 	call	_MibWriteDebugString
                                   1179 ;	./../../mib/stm8s_mib_debug_mem.c: 323: return FALSE;
      0006B6 5F               [ 1] 1180 	clrw	x
      0006B7 CCr07rD7         [ 2] 1181 	jp	00235$
      0006BA                       1182 00179$:
                                   1183 ;	./../../mib/stm8s_mib_debug_mem.c: 325: if (!HexToInt(argv[2], &dest, 32) || !HexToInt(argv[3], &src, 32) || !HexToInt(argv[4], &len, 32))
      0006BA 16 2E            [ 2] 1184 	ldw	y, (0x2e, sp)
      0006BC 90 EE 04         [ 2] 1185 	ldw	y, (0x4, y)
      0006BF 4B 20            [ 1] 1186 	push	#0x20
      0006C1 4B 00            [ 1] 1187 	push	#0x00
      0006C3 96               [ 1] 1188 	ldw	x, sp
      0006C4 1C 00 0E         [ 2] 1189 	addw	x, #14
      0006C7 89               [ 2] 1190 	pushw	x
      0006C8 93               [ 1] 1191 	ldw	x, y
      0006C9 CDr00r00         [ 4] 1192 	call	_HexToInt
      0006CC 5D               [ 2] 1193 	tnzw	x
      0006CD 27 2A            [ 1] 1194 	jreq	00180$
      0006CF 16 2E            [ 2] 1195 	ldw	y, (0x2e, sp)
      0006D1 90 EE 06         [ 2] 1196 	ldw	y, (0x6, y)
      0006D4 4B 20            [ 1] 1197 	push	#0x20
      0006D6 4B 00            [ 1] 1198 	push	#0x00
      0006D8 96               [ 1] 1199 	ldw	x, sp
      0006D9 1C 00 12         [ 2] 1200 	addw	x, #18
      0006DC 89               [ 2] 1201 	pushw	x
      0006DD 93               [ 1] 1202 	ldw	x, y
      0006DE CDr00r00         [ 4] 1203 	call	_HexToInt
      0006E1 5D               [ 2] 1204 	tnzw	x
      0006E2 27 15            [ 1] 1205 	jreq	00180$
      0006E4 16 2E            [ 2] 1206 	ldw	y, (0x2e, sp)
      0006E6 90 EE 08         [ 2] 1207 	ldw	y, (0x8, y)
      0006E9 4B 20            [ 1] 1208 	push	#0x20
      0006EB 4B 00            [ 1] 1209 	push	#0x00
      0006ED 96               [ 1] 1210 	ldw	x, sp
      0006EE 1C 00 16         [ 2] 1211 	addw	x, #22
      0006F1 89               [ 2] 1212 	pushw	x
      0006F2 93               [ 1] 1213 	ldw	x, y
      0006F3 CDr00r00         [ 4] 1214 	call	_HexToInt
      0006F6 5D               [ 2] 1215 	tnzw	x
      0006F7 26 0D            [ 1] 1216 	jrne	00181$
      0006F9                       1217 00180$:
                                   1218 ;	./../../mib/stm8s_mib_debug_mem.c: 327: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      0006F9 4Br2C            [ 1] 1219 	push	#<(__str_3+0)
      0006FB 4Bs00            [ 1] 1220 	push	#((__str_3+0) >> 8)
      0006FD CDr00r00         [ 4] 1221 	call	_mib_printf
      000700 5B 02            [ 2] 1222 	addw	sp, #2
                                   1223 ;	./../../mib/stm8s_mib_debug_mem.c: 328: return FALSE;
      000702 5F               [ 1] 1224 	clrw	x
      000703 CCr07rD7         [ 2] 1225 	jp	00235$
      000706                       1226 00181$:
                                   1227 ;	./../../mib/stm8s_mib_debug_mem.c: 331: if (memcmp((char *)dest, (char *)src, (len)) == 0) ccprintf(_DEBUG_CMD_A_, ("equil.\r\n"));
      000706 1E 16            [ 2] 1228 	ldw	x, (0x16, sp)
      000708 16 12            [ 2] 1229 	ldw	y, (0x12, sp)
      00070A 17 28            [ 2] 1230 	ldw	(0x28, sp), y
      00070C 16 0E            [ 2] 1231 	ldw	y, (0x0e, sp)
      00070E 89               [ 2] 1232 	pushw	x
      00070F 1E 2A            [ 2] 1233 	ldw	x, (0x2a, sp)
      000711 89               [ 2] 1234 	pushw	x
      000712 93               [ 1] 1235 	ldw	x, y
      000713 CDr00r00         [ 4] 1236 	call	_memcmp
      000716 5D               [ 2] 1237 	tnzw	x
      000717 26 0C            [ 1] 1238 	jrne	00185$
      000719 4Br13            [ 1] 1239 	push	#<(__str_23+0)
      00071B 4Bs01            [ 1] 1240 	push	#((__str_23+0) >> 8)
      00071D CDr00r00         [ 4] 1241 	call	_mib_printf
      000720 5B 02            [ 2] 1242 	addw	sp, #2
      000722 CCr07rD5         [ 2] 1243 	jp	00216$
      000725                       1244 00185$:
                                   1245 ;	./../../mib/stm8s_mib_debug_mem.c: 332: else ccprintf(_DEBUG_CMD_A_, ("not equil.\r\n"));		
      000725 4Br1C            [ 1] 1246 	push	#<(__str_24+0)
      000727 4Bs01            [ 1] 1247 	push	#((__str_24+0) >> 8)
      000729 CDr00r00         [ 4] 1248 	call	_mib_printf
      00072C 5B 02            [ 2] 1249 	addw	sp, #2
      00072E CCr07rD5         [ 2] 1250 	jp	00216$
      000731                       1251 00197$:
                                   1252 ;	./../../mib/stm8s_mib_debug_mem.c: 334: else if (!strcmp(argv[1], "set")) // _CMD_MY_MEMSET_
      000731 1E 26            [ 2] 1253 	ldw	x, (0x26, sp)
      000733 FE               [ 2] 1254 	ldw	x, (x)
      000734 4Br29            [ 1] 1255 	push	#<(___str_25+0)
      000736 4Bs01            [ 1] 1256 	push	#((___str_25+0) >> 8)
      000738 CDr00r00         [ 4] 1257 	call	_strcmp
      00073B 5D               [ 2] 1258 	tnzw	x
      00073C 26 71            [ 1] 1259 	jrne	00194$
                                   1260 ;	./../../mib/stm8s_mib_debug_mem.c: 336: if (argc < 5)
      00073E 1E 2C            [ 2] 1261 	ldw	x, (0x2c, sp)
      000740 A3 00 05         [ 2] 1262 	cpw	x, #0x0005
      000743 2E 0B            [ 1] 1263 	jrsge	00188$
                                   1264 ;	./../../mib/stm8s_mib_debug_mem.c: 338: MibWriteDebugString(cptr->usage);
      000745 1E 24            [ 2] 1265 	ldw	x, (0x24, sp)
      000747 EE 04            [ 2] 1266 	ldw	x, (0x4, x)
      000749 CDr00r00         [ 4] 1267 	call	_MibWriteDebugString
                                   1268 ;	./../../mib/stm8s_mib_debug_mem.c: 339: return FALSE;
      00074C 5F               [ 1] 1269 	clrw	x
      00074D CCr07rD7         [ 2] 1270 	jp	00235$
      000750                       1271 00188$:
                                   1272 ;	./../../mib/stm8s_mib_debug_mem.c: 341: if (!HexToInt(argv[2], &addr, 32) || !HexToInt(argv[3], &c, 8) || !HexToInt(argv[4], &len, 32))
      000750 16 2E            [ 2] 1273 	ldw	y, (0x2e, sp)
      000752 90 EE 04         [ 2] 1274 	ldw	y, (0x4, y)
      000755 4B 20            [ 1] 1275 	push	#0x20
      000757 4B 00            [ 1] 1276 	push	#0x00
      000759 96               [ 1] 1277 	ldw	x, sp
      00075A 1C 00 03         [ 2] 1278 	addw	x, #3
      00075D 89               [ 2] 1279 	pushw	x
      00075E 93               [ 1] 1280 	ldw	x, y
      00075F CDr00r00         [ 4] 1281 	call	_HexToInt
      000762 5D               [ 2] 1282 	tnzw	x
      000763 27 2A            [ 1] 1283 	jreq	00189$
      000765 16 2E            [ 2] 1284 	ldw	y, (0x2e, sp)
      000767 90 EE 06         [ 2] 1285 	ldw	y, (0x6, y)
      00076A 4B 08            [ 1] 1286 	push	#0x08
      00076C 4B 00            [ 1] 1287 	push	#0x00
      00076E 96               [ 1] 1288 	ldw	x, sp
      00076F 1C 00 07         [ 2] 1289 	addw	x, #7
      000772 89               [ 2] 1290 	pushw	x
      000773 93               [ 1] 1291 	ldw	x, y
      000774 CDr00r00         [ 4] 1292 	call	_HexToInt
      000777 5D               [ 2] 1293 	tnzw	x
      000778 27 15            [ 1] 1294 	jreq	00189$
      00077A 16 2E            [ 2] 1295 	ldw	y, (0x2e, sp)
      00077C 90 EE 08         [ 2] 1296 	ldw	y, (0x8, y)
      00077F 4B 20            [ 1] 1297 	push	#0x20
      000781 4B 00            [ 1] 1298 	push	#0x00
      000783 96               [ 1] 1299 	ldw	x, sp
      000784 1C 00 16         [ 2] 1300 	addw	x, #22
      000787 89               [ 2] 1301 	pushw	x
      000788 93               [ 1] 1302 	ldw	x, y
      000789 CDr00r00         [ 4] 1303 	call	_HexToInt
      00078C 5D               [ 2] 1304 	tnzw	x
      00078D 26 0C            [ 1] 1305 	jrne	00190$
      00078F                       1306 00189$:
                                   1307 ;	./../../mib/stm8s_mib_debug_mem.c: 343: ccprintf(_DEBUG_CMD_A_, ("Illugal character is used.\r\n"));
      00078F 4Br2C            [ 1] 1308 	push	#<(__str_3+0)
      000791 4Bs00            [ 1] 1309 	push	#((__str_3+0) >> 8)
      000793 CDr00r00         [ 4] 1310 	call	_mib_printf
      000796 5B 02            [ 2] 1311 	addw	sp, #2
                                   1312 ;	./../../mib/stm8s_mib_debug_mem.c: 344: return FALSE;
      000798 5F               [ 1] 1313 	clrw	x
      000799 20 3C            [ 2] 1314 	jra	00235$
      00079B                       1315 00190$:
                                   1316 ;	./../../mib/stm8s_mib_debug_mem.c: 346: memset((void *)addr, c, len);
      00079B 1E 16            [ 2] 1317 	ldw	x, (0x16, sp)
      00079D 7B 05            [ 1] 1318 	ld	a, (0x05, sp)
      00079F 6B 29            [ 1] 1319 	ld	(0x29, sp), a
      0007A1 0F 28            [ 1] 1320 	clr	(0x28, sp)
      0007A3 16 03            [ 2] 1321 	ldw	y, (0x03, sp)
      0007A5 89               [ 2] 1322 	pushw	x
      0007A6 1E 2A            [ 2] 1323 	ldw	x, (0x2a, sp)
      0007A8 89               [ 2] 1324 	pushw	x
      0007A9 93               [ 1] 1325 	ldw	x, y
      0007AA CDr00r00         [ 4] 1326 	call	_memset
      0007AD 20 26            [ 2] 1327 	jra	00216$
      0007AF                       1328 00194$:
                                   1329 ;	./../../mib/stm8s_mib_debug_mem.c: 350: MibWriteDebugString(cptr->usage);
      0007AF 1E 24            [ 2] 1330 	ldw	x, (0x24, sp)
      0007B1 EE 04            [ 2] 1331 	ldw	x, (0x4, x)
      0007B3 CDr00r00         [ 4] 1332 	call	_MibWriteDebugString
                                   1333 ;	./../../mib/stm8s_mib_debug_mem.c: 351: return FALSE;
      0007B6 5F               [ 1] 1334 	clrw	x
      0007B7 20 1E            [ 2] 1335 	jra	00235$
      0007B9                       1336 00301$:
      0007B9 16 28            [ 2] 1337 	ldw	y, (0x28, sp)
      0007BB 17 1A            [ 2] 1338 	ldw	(0x1a, sp), y
      0007BD 16 26            [ 2] 1339 	ldw	y, (0x26, sp)
      0007BF 17 18            [ 2] 1340 	ldw	(0x18, sp), y
      0007C1 20 12            [ 2] 1341 	jra	00216$
      0007C3                       1342 00302$:
      0007C3 16 28            [ 2] 1343 	ldw	y, (0x28, sp)
      0007C5 17 1A            [ 2] 1344 	ldw	(0x1a, sp), y
      0007C7 16 26            [ 2] 1345 	ldw	y, (0x26, sp)
      0007C9 17 18            [ 2] 1346 	ldw	(0x18, sp), y
      0007CB 20 08            [ 2] 1347 	jra	00216$
      0007CD                       1348 00303$:
      0007CD 16 28            [ 2] 1349 	ldw	y, (0x28, sp)
      0007CF 17 1A            [ 2] 1350 	ldw	(0x1a, sp), y
      0007D1 16 26            [ 2] 1351 	ldw	y, (0x26, sp)
      0007D3 17 18            [ 2] 1352 	ldw	(0x18, sp), y
      0007D5                       1353 00216$:
                                   1354 ;	./../../mib/stm8s_mib_debug_mem.c: 353: return TRUE;
      0007D5 5F               [ 1] 1355 	clrw	x
      0007D6 5C               [ 1] 1356 	incw	x
      0007D7                       1357 00235$:
                                   1358 ;	./../../mib/stm8s_mib_debug_mem.c: 354: }
      0007D7 16 2A            [ 2] 1359 	ldw	y, (42, sp)
      0007D9 5B 2F            [ 2] 1360 	addw	sp, #47
      0007DB 90 FC            [ 2] 1361 	jp	(y)
                                   1362 	.area CODE
                                   1363 	.area CONST
                                   1364 	.area CONST
      000000                       1365 __str_0:
      000000 49 4E 46 4F 3A 2B 63  1366 	.ascii "INFO:+cmd_mem..."
             6D 64 5F 6D 65 6D 2E
             2E 2E
      000010 0D                    1367 	.db 0x0d
      000011 0A                    1368 	.db 0x0a
      000012 00                    1369 	.db 0x00
                                   1370 	.area CODE
                                   1371 	.area CONST
      000013                       1372 __str_1:
      000013 49 4E 46 4F 3A 2D 63  1373 	.ascii "INFO:-cmd_mem..."
             6D 64 5F 6D 65 6D 2E
             2E 2E
      000023 0D                    1374 	.db 0x0d
      000024 0A                    1375 	.db 0x0a
      000025 00                    1376 	.db 0x00
                                   1377 	.area CODE
                                   1378 	.area CONST
      000026                       1379 ___str_2:
      000026 77 72 69 74 65        1380 	.ascii "write"
      00002B 00                    1381 	.db 0x00
                                   1382 	.area CODE
                                   1383 	.area CONST
      00002C                       1384 __str_3:
      00002C 49 6C 6C 75 67 61 6C  1385 	.ascii "Illugal character is used."
             20 63 68 61 72 61 63
             74 65 72 20 69 73 20
             75 73 65 64 2E
      000046 0D                    1386 	.db 0x0d
      000047 0A                    1387 	.db 0x0a
      000048 00                    1388 	.db 0x00
                                   1389 	.area CODE
                                   1390 	.area CONST
      000049                       1391 __str_4:
      000049 49 6C 6C 75 67 61 6C  1392 	.ascii "Illugal character is useqd."
             20 63 68 61 72 61 63
             74 65 72 20 69 73 20
             75 73 65 71 64 2E
      000064 0D                    1393 	.db 0x0d
      000065 0A                    1394 	.db 0x0a
      000066 00                    1395 	.db 0x00
                                   1396 	.area CODE
                                   1397 	.area CONST
      000067                       1398 ___str_5:
      000067 72 65 61 64           1399 	.ascii "read"
      00006B 00                    1400 	.db 0x00
                                   1401 	.area CODE
                                   1402 	.area CONST
      00006C                       1403 __str_6:
      00006C 09                    1404 	.db 0x09
      00006D 61 64 64 72 65 73 73  1405 	.ascii "address : 0x%08lx  "
             20 3A 20 30 78 25 30
             38 6C 78 20 20
      000080 00                    1406 	.db 0x00
                                   1407 	.area CODE
                                   1408 	.area CONST
      000081                       1409 __str_7:
      000081 09                    1410 	.db 0x09
      000082 76 61 6C 75 65 20 20  1411 	.ascii "value   : "
             20 3A 20
      00008C 00                    1412 	.db 0x00
                                   1413 	.area CODE
                                   1414 	.area CONST
      00008D                       1415 __str_8:
      00008D 30 78 25 30 32 78 20  1416 	.ascii "0x%02x "
      000094 00                    1417 	.db 0x00
                                   1418 	.area CODE
                                   1419 	.area CONST
      000095                       1420 __str_9:
      000095 30 78 25 30 34 78     1421 	.ascii "0x%04x"
      00009B 00                    1422 	.db 0x00
                                   1423 	.area CODE
                                   1424 	.area CONST
      00009C                       1425 __str_10:
      00009C 30 78 25 30 38 6C 78  1426 	.ascii "0x%08lx"
      0000A3 00                    1427 	.db 0x00
                                   1428 	.area CODE
                                   1429 	.area CONST
      0000A4                       1430 __str_11:
      0000A4 45 72 72 6F 72 2E     1431 	.ascii "Error."
      0000AA 0D                    1432 	.db 0x0d
      0000AB 0A                    1433 	.db 0x0a
      0000AC 00                    1434 	.db 0x00
                                   1435 	.area CODE
                                   1436 	.area CONST
      0000AD                       1437 __str_12:
      0000AD 2E                    1438 	.ascii "."
      0000AE 0D                    1439 	.db 0x0d
      0000AF 0A                    1440 	.db 0x0a
      0000B0 00                    1441 	.db 0x00
                                   1442 	.area CODE
                                   1443 	.area CONST
      0000B1                       1444 ___str_13:
      0000B1 77 72 6E              1445 	.ascii "wrn"
      0000B4 00                    1446 	.db 0x00
                                   1447 	.area CODE
                                   1448 	.area CONST
      0000B5                       1449 ___str_14:
      0000B5 72 64 6E              1450 	.ascii "rdn"
      0000B8 00                    1451 	.db 0x00
                                   1452 	.area CODE
                                   1453 	.area CONST
      0000B9                       1454 __str_15:
      0000B9 6C 6F 6F 70 20 3A 20  1455 	.ascii "loop : 0x%08lx  "
             30 78 25 30 38 6C 78
             20 20
      0000C9 0D                    1456 	.db 0x0d
      0000CA 0A                    1457 	.db 0x0a
      0000CB 00                    1458 	.db 0x00
                                   1459 	.area CODE
                                   1460 	.area CONST
      0000CC                       1461 __str_16:
      0000CC 76 61 6C 75 65 20 20  1462 	.ascii "value   : "
             20 3A 20
      0000D6 00                    1463 	.db 0x00
                                   1464 	.area CODE
                                   1465 	.area CONST
      0000D7                       1466 __str_17:
      0000D7 30 78 25 30 34 78 20  1467 	.ascii "0x%04x "
      0000DE 00                    1468 	.db 0x00
                                   1469 	.area CODE
                                   1470 	.area CONST
      0000DF                       1471 __str_18:
      0000DF 30 78 25 30 38 6C 78  1472 	.ascii "0x%08lx "
             20
      0000E7 00                    1473 	.db 0x00
                                   1474 	.area CODE
                                   1475 	.area CONST
      0000E8                       1476 ___str_19:
      0000E8 68 64 75 6D 70        1477 	.ascii "hdump"
      0000ED 00                    1478 	.db 0x00
                                   1479 	.area CODE
                                   1480 	.area CONST
      0000EE                       1481 ___str_20:
      0000EE 63 70 79              1482 	.ascii "cpy"
      0000F1 00                    1483 	.db 0x00
                                   1484 	.area CODE
                                   1485 	.area CONST
      0000F2                       1486 __str_21:
      0000F2 49 6C 6C 65 67 61 6C  1487 	.ascii "Illegal character is used."
             20 63 68 61 72 61 63
             74 65 72 20 69 73 20
             75 73 65 64 2E
      00010C 0D                    1488 	.db 0x0d
      00010D 0A                    1489 	.db 0x0a
      00010E 00                    1490 	.db 0x00
                                   1491 	.area CODE
                                   1492 	.area CONST
      00010F                       1493 ___str_22:
      00010F 63 6D 70              1494 	.ascii "cmp"
      000112 00                    1495 	.db 0x00
                                   1496 	.area CODE
                                   1497 	.area CONST
      000113                       1498 __str_23:
      000113 65 71 75 69 6C 2E     1499 	.ascii "equil."
      000119 0D                    1500 	.db 0x0d
      00011A 0A                    1501 	.db 0x0a
      00011B 00                    1502 	.db 0x00
                                   1503 	.area CODE
                                   1504 	.area CONST
      00011C                       1505 __str_24:
      00011C 6E 6F 74 20 65 71 75  1506 	.ascii "not equil."
             69 6C 2E
      000126 0D                    1507 	.db 0x0d
      000127 0A                    1508 	.db 0x0a
      000128 00                    1509 	.db 0x00
                                   1510 	.area CODE
                                   1511 	.area CONST
      000129                       1512 ___str_25:
      000129 73 65 74              1513 	.ascii "set"
      00012C 00                    1514 	.db 0x00
                                   1515 	.area CODE
                                   1516 	.area CONST
      00012D                       1517 ___str_26:
      00012D 6D 65 6D              1518 	.ascii "mem"
      000130 00                    1519 	.db 0x00
                                   1520 	.area CODE
                                   1521 	.area CONST
      000131                       1522 ___str_27:
      000131 20 20 6D 65 6D 20 7B  1523 	.ascii "  mem {cpy}   [dest] [src]   [len] Copy to SDRAM from Flash "
             63 70 79 7D 20 20 20
             5B 64 65 73 74 5D 20
             5B 73 72 63 5D 20 20
             20 5B 6C 65 6E 5D 20
             43 6F 70 79 20 74 6F
             20 53 44 52 41 4D 20
             66 72 6F 6D 20 46 6C
             61 73 68 20
      00016D 6F 72 20 53 44 52 41  1524 	.ascii "or SDRAM."
             4D 2E
      000176 0D                    1525 	.db 0x0d
      000177 0A                    1526 	.db 0x0a
      000178 20 20 6D 65 6D 20 7B  1527 	.ascii "  mem {cmp}   [add1] [add2]  [len] Compare data in addr1 and"
             63 6D 70 7D 20 20 20
             5B 61 64 64 31 5D 20
             5B 61 64 64 32 5D 20
             20 5B 6C 65 6E 5D 20
             43 6F 6D 70 61 72 65
             20 64 61 74 61 20 69
             6E 20 61 64 64 72 31
             20 61 6E 64
      0001B4 20 61 64 64 72 32 2E  1528 	.ascii " addr2."
      0001BB 0D                    1529 	.db 0x0d
      0001BC 0A                    1530 	.db 0x0a
      0001BD 20 20 6D 65 6D 20 7B  1531 	.ascii "  mem {set}   [addr] [value] [len] Fill Memory with value."
             73 65 74 7D 20 20 20
             5B 61 64 64 72 5D 20
             5B 76 61 6C 75 65 5D
             20 5B 6C 65 6E 5D 20
             46 69 6C 6C 20 4D 65
             6D 6F 72 79 20 77 69
             74 68 20 76 61 6C 75
             65 2E
      0001F7 0D                    1532 	.db 0x0d
      0001F8 0A                    1533 	.db 0x0a
      0001F9 20 20 6D 65 6D 20 7B  1534 	.ascii "  mem {hdump} [addr] [len]         Dump Memory."
             68 64 75 6D 70 7D 20
             5B 61 64 64 72 5D 20
             5B 6C 65 6E 5D 20 20
             20 20 20 20 20 20 20
             44 75 6D 70 20 4D 65
             6D 6F 72 79 2E
      000228 0D                    1535 	.db 0x0d
      000229 0A                    1536 	.db 0x0a
      00022A 20 20 6D 65 6D 20 7B  1537 	.ascii "  mem {wrn} {c/s/l} [addr] [value] [loop]  Wrn in addr. c:8 "
             77 72 6E 7D 20 7B 63
             2F 73 2F 6C 7D 20 5B
             61 64 64 72 5D 20 5B
             76 61 6C 75 65 5D 20
             5B 6C 6F 6F 70 5D 20
             20 57 72 6E 20 69 6E
             20 61 64 64 72 2E 20
             63 3A 38 20
      000266 73 3A 31 36 20 6C 3A  1538 	.ascii "s:16 l:32 bits."
             33 32 20 62 69 74 73
             2E
      000275 0D                    1539 	.db 0x0d
      000276 0A                    1540 	.db 0x0a
      000277 20 20 6D 65 6D 20 7B  1541 	.ascii "  mem {rdn}  {c/s/l} [addr] [loop]   Rdn in addr. c:8 s:16 l"
             72 64 6E 7D 20 20 7B
             63 2F 73 2F 6C 7D 20
             5B 61 64 64 72 5D 20
             5B 6C 6F 6F 70 5D 20
             20 20 52 64 6E 20 69
             6E 20 61 64 64 72 2E
             20 63 3A 38 20 73 3A
             31 36 20 6C
      0002B3 3A 33 32 20 62 69 74  1542 	.ascii ":32 bits."
             73 2E
      0002BC 0D                    1543 	.db 0x0d
      0002BD 0A                    1544 	.db 0x0a
      0002BE 20 20 6D 65 6D 20 7B  1545 	.ascii "  mem {write} {c/s/l} [addr] [value]  Write in addr. c:8 s:1"
             77 72 69 74 65 7D 20
             7B 63 2F 73 2F 6C 7D
             20 5B 61 64 64 72 5D
             20 5B 76 61 6C 75 65
             5D 20 20 57 72 69 74
             65 20 69 6E 20 61 64
             64 72 2E 20 63 3A 38
             20 73 3A 31
      0002FA 36 20 6C 3A 33 32 20  1546 	.ascii "6 l:32 bits."
             62 69 74 73 2E
      000306 0D                    1547 	.db 0x0d
      000307 0A                    1548 	.db 0x0a
      000308 20 20 6D 65 6D 20 7B  1549 	.ascii "  mem {read}  {c/s/l} [addr]          Read in addr. c:8 s:16"
             72 65 61 64 7D 20 20
             7B 63 2F 73 2F 6C 7D
             20 5B 61 64 64 72 5D
             20 20 20 20 20 20 20
             20 20 20 52 65 61 64
             20 69 6E 20 61 64 64
             72 2E 20 63 3A 38 20
             73 3A 31 36
      000344 20 6C 3A 33 32 20 62  1550 	.ascii " l:32 bits."
             69 74 73 2E
      00034F 0D                    1551 	.db 0x0d
      000350 0A                    1552 	.db 0x0a
      000351 00                    1553 	.db 0x00
                                   1554 	.area CODE
                                   1555 	.area INITIALIZER
      000000                       1556 __xinit__cmdTbl_only:
      000000r01r2D                 1557 	.dw ___str_26
      000002r00r62                 1558 	.dw _DoMem
      000004r01r31                 1559 	.dw ___str_27
      000006 00 00                 1560 	.dw #0x0000
      000008 00 00                 1561 	.dw #0x0000
      00000A 00 00                 1562 	.dw #0x0000
                                   1563 	.area CABS (ABS)
